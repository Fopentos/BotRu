import os
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import random

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode='HTML')
)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TaskCreation(StatesGroup):
    waiting_for_channel = State()
    waiting_for_reward = State()
    waiting_for_description = State()

class SubscriptionCheck(StatesGroup):
    waiting_for_subscription = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
class Database:
    def __init__(self):
        self.conn = sqlite3.connect('pyara.db', check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                balance INTEGER DEFAULT 1000,
                total_earned INTEGER DEFAULT 0,
                total_spent INTEGER DEFAULT 0,
                registered_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                creator_id INTEGER,
                channel_id TEXT,
                channel_title TEXT,
                channel_username TEXT,
                reward INTEGER,
                description TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_by INTEGER,
                completed_date TIMESTAMP,
                FOREIGN KEY (creator_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS completed_tasks (
                user_id INTEGER,
                task_id INTEGER,
                completed_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, task_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ç–æ –Ω–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER,
                channel_id TEXT,
                subscribed_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, channel_id)
            )
        ''')
        
        self.conn.commit()
    
    def get_user(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute(
            'SELECT * FROM users WHERE user_id = ?', 
            (user_id,)
        )
        return cursor.fetchone()
    
    def create_user(self, user_id: int, username: str, first_name: str):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, balance) 
            VALUES (?, ?, ?, 1000)
        ''', (user_id, username, first_name))
        self.conn.commit()
    
    def update_balance(self, user_id: int, amount: int):
        cursor = self.conn.cursor()
        cursor.execute(
            'UPDATE users SET balance = balance + ? WHERE user_id = ?',
            (amount, user_id)
        )
        
        if amount > 0:
            cursor.execute(
                'UPDATE users SET total_earned = total_earned + ? WHERE user_id = ?',
                (amount, user_id)
            )
        else:
            cursor.execute(
                'UPDATE users SET total_spent = total_spent + ? WHERE user_id = ?',
                (abs(amount), user_id)
            )
        
        self.conn.commit()
    
    def create_task(self, creator_id: int, channel_id: str, channel_title: str, 
                   channel_username: str, reward: int, description: str):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO tasks 
            (creator_id, channel_id, channel_title, channel_username, reward, description)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (creator_id, channel_id, channel_title, channel_username, reward, description))
        self.conn.commit()
        return cursor.lastrowid
    
    def get_active_tasks(self, exclude_user_id: int = None):
        cursor = self.conn.cursor()
        if exclude_user_id:
            cursor.execute('''
                SELECT t.*, u.username as creator_username 
                FROM tasks t
                JOIN users u ON t.creator_id = u.user_id
                WHERE t.is_active = TRUE 
                AND t.creator_id != ?
                ORDER BY t.created_date DESC
            ''', (exclude_user_id,))
        else:
            cursor.execute('''
                SELECT t.*, u.username as creator_username 
                FROM tasks t
                JOIN users u ON t.creator_id = u.user_id
                WHERE t.is_active = TRUE 
                ORDER BY t.created_date DESC
            ''')
        return cursor.fetchall()
    
    def get_user_tasks(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT * FROM tasks 
            WHERE creator_id = ? 
            ORDER BY created_date DESC
        ''', (user_id,))
        return cursor.fetchall()
    
    def complete_task(self, task_id: int, user_id: int):
        cursor = self.conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        cursor.execute('SELECT * FROM tasks WHERE task_id = ?', (task_id,))
        task = cursor.fetchone()
        
        if not task:
            return False
        
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
        cursor.execute('''
            UPDATE tasks 
            SET is_active = FALSE, completed_by = ?, completed_date = CURRENT_TIMESTAMP
            WHERE task_id = ?
        ''', (user_id, task_id))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        cursor.execute('''
            INSERT OR IGNORE INTO completed_tasks (user_id, task_id)
            VALUES (?, ?)
        ''', (user_id, task_id))
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        reward = task[5]  # reward –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 6-–π –∫–æ–ª–æ–Ω–∫–µ (–∏–Ω–¥–µ–∫—Å 5)
        self.update_balance(user_id, reward)
        
        self.conn.commit()
        return True
    
    def has_completed_task(self, user_id: int, task_id: int):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT 1 FROM completed_tasks 
            WHERE user_id = ? AND task_id = ?
        ''', (user_id, task_id))
        return cursor.fetchone() is not None
    
    def add_subscription(self, user_id: int, channel_id: str):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO subscriptions (user_id, channel_id)
            VALUES (?, ?)
        ''', (user_id, channel_id))
        self.conn.commit()
    
    def get_user_subscriptions(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT channel_id FROM subscriptions WHERE user_id = ?
        ''', (user_id,))
        return [row[0] for row in cursor.fetchall()]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")],
            [KeyboardButton(text="üéØ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    db.create_user(user.id, user.username, user.first_name)
    
    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
        "ü§ù <b>–ë–æ—Ç –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞</b>\n\n"
        "üí∑ <b>–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> 1000 üí∑\n\n"
        "üéØ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ –≤–∞–ª—é—Ç—É\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
        "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!</b>",
        reply_markup=get_main_keyboard()
    )

# –ë–∞–ª–∞–Ω—Å
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_data = db.get_user(message.from_user.id)
    if user_data:
        balance = user_data[3]  # balance –≤ 4-–π –∫–æ–ª–æ–Ω–∫–µ
        total_earned = user_data[4]  # total_earned –≤ 5-–π –∫–æ–ª–æ–Ω–∫–µ
        total_spent = user_data[5]  # total_spent –≤ 6-–π –∫–æ–ª–æ–Ω–∫–µ
        
        await message.answer(
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} üí∑\n\n"
            f"üìà <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {total_earned} üí∑\n"
            f"üìâ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_spent} üí∑\n\n"
            f"üí° <b>–°–æ–≤–µ—Ç:</b> –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å!"
        )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_data = db.get_user(message.from_user.id)
    user_tasks = db.get_user_tasks(message.from_user.id)
    
    if user_data:
        balance = user_data[3]
        total_earned = user_data[4]
        total_spent = user_data[5]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
        active_tasks = len([t for t in user_tasks if t[7]])  # is_active –≤ 8-–π –∫–æ–ª–æ–Ω–∫–µ
        completed_tasks = len([t for t in user_tasks if not t[7] and t[9]])  # completed_by –≤ 10-–π –∫–æ–ª–æ–Ω–∫–µ
        
        await message.answer(
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} üí∑\n"
            f"üìà <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ:</b> {total_earned} üí∑\n"
            f"üìâ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {total_spent} üí∑\n\n"
            f"üéØ <b>–ó–∞–¥–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tasks}\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_tasks}\n\n"
            f"üöÄ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</b>"
        )

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def start_task_creation(message: types.Message, state: FSMContext):
    user_data = db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    balance = user_data[3]
    if balance < 100:
        await message.answer(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} üí∑\n"
            f"üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è: 100 üí∑\n\n"
            "üéØ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        "üîó <b>–®–∞–≥ 1:</b> –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫!",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TaskCreation.waiting_for_channel)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞
@dp.message(TaskCreation.waiting_for_channel)
async def process_channel(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    channel_info = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
    if message.forward_from_chat and message.forward_from_chat.type == "channel":
        chat = message.forward_from_chat
        channel_info = {
            'id': str(chat.id),
            'title': chat.title,
            'username': chat.username
        }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ username –∫–∞–Ω–∞–ª–∞
    elif message.text and message.text.startswith('@'):
        username = message.text[1:]
        try:
            chat = await bot.get_chat(f"@{username}")
            if chat.type == "channel":
                channel_info = {
                    'id': str(chat.id),
                    'title': chat.title,
                    'username': chat.username
                }
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å @username")
            return
    
    if not channel_info:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
    try:
        bot_member = await bot.get_chat_member(int(channel_info['id']), bot.id)
        if not bot_member.is_chat_admin():
            await message.answer(
                "‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, "
                "—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É:</b> {str(e)}\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    await state.update_data(channel_info=channel_info)
    
    await message.answer(
        f"‚úÖ <b>–ö–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω:</b> {channel_info['title']}\n\n"
        f"üí∑ <b>–®–∞–≥ 2:</b> –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (–æ—Ç 100 –¥–æ 5000 üí∑)\n\n"
        f"üí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {db.get_user(message.from_user.id)[3]} üí∑",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TaskCreation.waiting_for_reward)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
@dp.message(TaskCreation.waiting_for_reward)
async def process_reward(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    try:
        reward = int(message.text)
        user_data = db.get_user(message.from_user.id)
        balance = user_data[3]
        
        if reward < 100:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: 100 üí∑")
            return
        
        if reward > 5000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: 5000 üí∑")
            return
        
        if reward > balance:
            await message.answer(
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} üí∑\n"
                f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è: {reward} üí∑\n\n"
                "üéØ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!"
            )
            return
        
        await state.update_data(reward=reward)
        
        await message.answer(
            f"üí∞ <b>–°—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:</b> {reward} üí∑\n\n"
            "üìù <b>–®–∞–≥ 3:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
            "–ü—Ä–∏–º–µ—Ä: \"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö\"",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(TaskCreation.waiting_for_description)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@dp.message(TaskCreation.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    data = await state.get_data()
    channel_info = data['channel_info']
    reward = data['reward']
    description = message.text if message.text != "‚ùå –û—Ç–º–µ–Ω–∞" else "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª"
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    db.update_balance(message.from_user.id, -reward)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    task_id = db.create_task(
        creator_id=message.from_user.id,
        channel_id=channel_info['id'],
        channel_title=channel_info['title'],
        channel_username=channel_info.get('username'),
        reward=reward,
        description=description
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_info['title']}\n"
        f"üí∑ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {reward} üí∑\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        f"üÜî <b>ID –∑–∞–¥–∞–Ω–∏—è:</b> {task_id}\n\n"
        f"üí∞ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {db.get_user(message.from_user.id)[3]} üí∑\n\n"
        f"üë• –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ!",
        reply_markup=get_main_keyboard()
    )

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
@dp.message(F.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def show_active_tasks(message: types.Message):
    tasks = db.get_active_tasks(exclude_user_id=message.from_user.id)
    
    if not tasks:
        await message.answer(
            "üòî <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> {len(tasks)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    
    for task in tasks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞–Ω–∏–π
        task_id = task[0]
        channel_title = task[3]
        reward = task[5]
        description = task[6] or "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª"
        creator_username = task[11] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üéØ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞ {reward} üí∑", callback_data=f"do_task_{task_id}")]
        ])
        
        await message.answer(
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}\n"
            f"üí∑ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {reward} üí∑\n"
            f"üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_username}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}",
            reply_markup=keyboard
        )

# –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "üéØ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def show_my_tasks(message: types.Message):
    tasks = db.get_user_tasks(message.from_user.id)
    
    if not tasks:
        await message.answer(
            "üìù <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã!",
            reply_markup=get_main_keyboard()
        )
        return
    
    active_tasks = [t for t in tasks if t[7]]  # is_active
    completed_tasks = [t for t in tasks if not t[7] and t[9]]  # completed_by
    
    await message.answer(
        f"üìã <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_tasks)}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {len(completed_tasks)}"
    )
    
    for task in tasks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        task_id = task[0]
        channel_title = task[3]
        reward = task[5]
        is_active = task[7]
        completed_by = task[9]
        
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if is_active else "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        
        await message.answer(
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}\n"
            f"üí∑ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {reward} üí∑\n"
            f"üÜî <b>ID:</b> {task_id}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("do_task_"))
async def process_task_completion(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    if db.has_completed_task(user_id, task_id):
        await callback.answer("‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
    tasks = db.get_active_tasks()
    task = next((t for t in tasks if t[0] == task_id), None)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        return
    
    channel_id = task[2]
    channel_title = task[3]
    channel_username = task[4]
    reward = task[5]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        chat_member = await bot.get_chat_member(int(channel_id), user_id)
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        
        if is_subscribed:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            db.complete_task(task_id, user_id)
            db.add_subscription(user_id, channel_id)
            
            user_data = db.get_user(user_id)
            new_balance = user_data[3]
            
            await callback.message.edit_text(
                f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}\n"
                f"üí∑ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> {reward} üí∑\n\n"
                f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {new_balance} üí∑\n\n"
                f"üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ!",
                reply_markup=None
            )
        else:
            # –ü—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            channel_link = f"https://t.me/{channel_username}" if channel_username else f"https://t.me/c/{channel_id[4:]}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_link)],
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"check_sub_{task_id}")]
            ])
            
            await callback.message.edit_text(
                f"üì∫ <b>–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
                f"1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel_title}\n"
                f"2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                f"üí∑ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {reward} üí∑",
                reply_markup=keyboard
            )
            
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}", show_alert=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
@dp.callback_query(F.data.startswith("check_sub_"))
async def check_subscription(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
    tasks = db.get_active_tasks()
    task = next((t for t in tasks if t[0] == task_id), None)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        return
    
    channel_id = task[2]
    channel_title = task[3]
    reward = task[5]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        chat_member = await bot.get_chat_member(int(channel_id), user_id)
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        
        if is_subscribed:
            # –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
            db.complete_task(task_id, user_id)
            db.add_subscription(user_id, channel_id)
            
            user_data = db.get_user(user_id)
            new_balance = user_data[3]
            
            await callback.message.edit_text(
                f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}\n"
                f"üí∑ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> {reward} üí∑\n\n"
                f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {new_balance} üí∑\n\n"
                f"üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ!",
                reply_markup=None
            )
        else:
            await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}", show_alert=True)

# –ü–æ–º–æ—â—å
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "ü§ù <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞</b>\n\n"
        "üí∑ <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</b>\n"
        "‚Ä¢ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 1000 üí∑\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è: 100 üí∑\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è: 5000 üí∑\n\n"
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ'\n"
        "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
        "3. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è\n"
        "4. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ\n"
        "3. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ –ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞\n\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç",
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ –ë–æ—Ç –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
