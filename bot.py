import os
import json
import random
import asyncio
import logging
import math
from datetime import datetime
from collections import defaultdict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8295619077:AAH05zqWTC8Kv11dLJyaMlSWlXEJtmU_Too"
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# üéÆ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´ "–†–ê–ö–ï–¢–ê"
ROCKET_CONFIG = {
    "min_bet": 1,
    "max_bet": 100000,
    "multiplier_step": 0.01,
    "time_step": 0.1,  # –£–ú–ï–ù–¨–®–ï–ù–ê –°–ö–û–†–û–°–¢–¨: 0.1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    "max_multiplier": 10000,
    "rtp": 0.75,  # RTP 75%
}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò
user_data = defaultdict(lambda: {
    'balance': 1000.0,
    'current_bet': 100,
    'total_games': 0,
    'games_won': 0,
    'total_wagered': 0,
    'total_won': 0,
    'max_multiplier': 0
})

active_games = {}

# üìä –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üöÄ –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ "–†–ê–ö–ï–¢–ê"
def generate_crash_point():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫—É –≤–∑—Ä—ã–≤–∞ —Å RTP ~75%
    –§–æ—Ä–º—É–ª–∞: crash_point = (1 - RTP) / (1 - random())
    –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ RTP
    """
    r = random.random()
    crash_point = (1 - ROCKET_CONFIG['rtp']) / (1 - r)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
    return min(crash_point, ROCKET_CONFIG['max_multiplier'])

def calculate_explosion_chance(current_multiplier, crash_point):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å –≤–∑—Ä—ã–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∏ —Ç–æ—á–∫–∏ –≤–∑—Ä—ã–≤–∞"""
    if current_multiplier >= crash_point:
        return 1.0
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—Ä—ã–≤–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø–æ –º–µ—Ä–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ crash_point
    progress = current_multiplier / crash_point
    base_chance = 0.01  # 1% –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å
    progress_chance = progress * 0.5  # –î–æ 50% –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ crash_point
    
    return min(base_chance + progress_chance, 0.9)  # –ú–∞–∫—Å–∏–º—É–º 90%

def create_progress_bar(multiplier, length=20):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    progress = min(multiplier / ROCKET_CONFIG['max_multiplier'], 1.0)
    filled = int(length * progress)
    bar = "‚ñ∞" * filled + "‚ñ±" * (length - filled)
    return f"[{bar}] {progress*100:.1f}%"

async def rocket_game_task(user_id, bet_amount, message, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–∞–∫–µ—Ç—É"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤–∑—Ä—ã–≤–∞ —Å RTP 75%
        crash_point = generate_crash_point()
        logger.info(f"User {user_id}: crash_point = {crash_point:.2f}x")
        
        multiplier = 1.00
        start_time = datetime.now()
        
        while multiplier <= ROCKET_CONFIG['max_multiplier']:
            if user_id not in active_games:
                return  # –ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
            active_games[user_id]['current_multiplier'] = multiplier
            active_games[user_id]['crash_point'] = crash_point
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑—Ä—ã–≤
            if multiplier >= crash_point:
                # –í–ó–†–´–í
                explosion_text = (
                    f"üí• –†–ê–ö–ï–¢–ê –í–ó–û–†–í–ê–õ–ê–°–¨ –ù–ê {multiplier:.2f}x!\n\n"
                    f"üí∞ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏: {bet_amount} ‚≠ê\n"
                    f"üìà –¢–æ—á–∫–∞ –≤–∑—Ä—ã–≤–∞: {crash_point:.2f}x\n"
                    f"üéØ RTP —Å–∏—Å—Ç–µ–º—ã: {ROCKET_CONFIG['rtp']*100}%\n\n"
                    "üí° –†–∞–∫–µ—Ç–∞ –º–æ–∂–µ—Ç –≤–∑–æ—Ä–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ!"
                )
                
                keyboard = [
                    [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_rocket")],
                    [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                ]
                
                await message.edit_text(
                    explosion_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                user_data[user_id]['total_games'] += 1
                user_data[user_id]['total_wagered'] += bet_amount
                if user_id in active_games:
                    del active_games[user_id]
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            potential_win = bet_amount * multiplier
            time_elapsed = (datetime.now() - start_time).total_seconds()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å –≤–∑—Ä—ã–≤–∞
            explosion_chance = calculate_explosion_chance(multiplier, crash_point)
            
            keyboard = [
                [InlineKeyboardButton(f"üéØ –ó–ê–ë–†–ê–¢–¨ {potential_win:.0f} ‚≠ê", callback_data="cashout")],
                [InlineKeyboardButton("üí• –û–°–¢–ê–ù–û–í–ò–¢–¨", callback_data="stop_game")]
            ]
            
            progress_bar = create_progress_bar(multiplier)
            
            try:
                await message.edit_text(
                    f"üöÄ –†–ê–ö–ï–¢–ê –í–ó–õ–ï–¢–ê–ï–¢...\n\n"
                    f"{progress_bar}\n"
                    f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier:.2f}x\n"
                    f"üí∞ –í—ã–∏–≥—Ä—ã—à: {potential_win:.0f} ‚≠ê\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time_elapsed:.1f} —Å–µ–∫\n"
                    f"üéØ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å –≤–∑—Ä—ã–≤–∞: {explosion_chance*100:.1f}%",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                if user_id in active_games:
                    del active_games[user_id]
                return
            
            await asyncio.sleep(ROCKET_CONFIG['time_step'])
            multiplier += ROCKET_CONFIG['multiplier_step']
        
        # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å (–æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
        win_amount = bet_amount * ROCKET_CONFIG['max_multiplier']
        user_data[user_id]['balance'] += win_amount
        user_data[user_id]['total_games'] += 1
        user_data[user_id]['games_won'] += 1
        user_data[user_id]['total_wagered'] += bet_amount
        user_data[user_id]['total_won'] += win_amount
        user_data[user_id]['max_multiplier'] = max(user_data[user_id]['max_multiplier'], ROCKET_CONFIG['max_multiplier'])
        
        await message.edit_text(
            f"üéâ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ú–ù–û–ñ–ò–¢–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢!\n\n"
            f"üí∞ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {win_amount:.0f} ‚≠ê\n"
            f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {ROCKET_CONFIG['max_multiplier']}x\n"
            f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']:.0f} ‚≠ê",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_rocket"),
                InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            ]])
        )
        
        if user_id in active_games:
            del active_games[user_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ: {e}")
        if user_id in active_games:
            del active_games[user_id]

# üë§ –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = f"""
üöÄ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í ROCKET CASINO!

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å
/bet [—Å—É–º–º–∞] - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É
/rocket - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É

üéÆ –ò–ì–†–ê "–†–ê–ö–ï–¢–ê":
‚Ä¢ –°—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞—Å—Ç—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
‚Ä¢ –ó–∞–±–µ—Ä–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à –¥–æ –≤–∑—Ä—ã–≤–∞ —Ä–∞–∫–µ—Ç—ã
‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç–µ—Ç –¥–æ {ROCKET_CONFIG['max_multiplier']}x
‚Ä¢ –†–∞–∫–µ—Ç–∞ –º–æ–∂–µ—Ç –≤–∑–æ—Ä–≤–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
‚Ä¢ RTP —Å–∏—Å—Ç–µ–º—ã: {ROCKET_CONFIG['rtp']*100}%
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ Rocket", callback_data="play_rocket")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data[user_id]
    
    win_rate = (data['games_won'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
    
    profile_text = f"""
üìä –ü–†–û–§–ò–õ–¨ –ò–ì–†–û–ö–ê

üí∞ –ë–∞–ª–∞–Ω—Å: {data['balance']:.0f} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['games_won']}
üìä –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üíé –ú–∞–∫—Å. –º–Ω–æ–∂–∏—Ç–µ–ª—å: {data['max_multiplier']:.2f}x
üí∞ –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {data['total_wagered']:.0f} ‚≠ê
üéÅ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {data['total_won']:.0f} ‚≠ê
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ Rocket", callback_data="play_rocket")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")]
    ]
    
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(profile_text, reply_markup=reply_markup)

async def bet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['current_bet']} ‚≠ê\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bet <—Å—É–º–º–∞>\n"
            f"–ú–∏–Ω–∏–º—É–º: {ROCKET_CONFIG['min_bet']} ‚≠ê\n"
            f"–ú–∞–∫—Å–∏–º—É–º: {ROCKET_CONFIG['max_bet']} ‚≠ê"
        )
        return
    
    try:
        new_bet = int(context.args[0])
        
        if new_bet < ROCKET_CONFIG['min_bet']:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {ROCKET_CONFIG['min_bet']} ‚≠ê")
            return
            
        if new_bet > ROCKET_CONFIG['max_bet']:
            await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {ROCKET_CONFIG['max_bet']} ‚≠ê")
            return
            
        user_data[user_id]['current_bet'] = new_bet
        
        await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet} ‚≠ê")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

async def rocket_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_rocket_game(update, context)

# üéÆ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ì–†–´
async def start_rocket_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data[user_id]
    bet_amount = data['current_bet']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    if user_id in active_games:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!", show_alert=True)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if data['balance'] < bet_amount:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            await update.callback_query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {data['balance']:.0f} ‚≠ê\n"
                f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {bet_amount} ‚≠ê",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                    InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")
                ]])
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {data['balance']:.0f} ‚≠ê\n"
                f"üéØ –°—Ç–∞–≤–∫–∞: {bet_amount} ‚≠ê"
            )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    user_data[user_id]['balance'] -= bet_amount
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã
    keyboard = [[InlineKeyboardButton("üîÑ –ó–∞–ø—É—Å–∫...", callback_data="loading")]]
    
    if update.callback_query:
        message = await update.callback_query.edit_message_text(
            f"üöÄ –ü–û–î–ì–û–¢–û–í–ö–ê –†–ê–ö–ï–¢–´...\n\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} ‚≠ê\n"
            f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: 1.00x\n"
            f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞...",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        message = await update.message.reply_text(
            f"üöÄ –ü–û–î–ì–û–¢–û–í–ö–ê –†–ê–ö–ï–¢–´...\n\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} ‚≠ê\n"
            f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: 1.00x\n"
            f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞...",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    active_games[user_id] = {
        'bet_amount': bet_amount,
        'message_id': message.message_id,
        'chat_id': message.chat_id,
        'current_multiplier': 1.00
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(rocket_game_task(user_id, bet_amount, message, context))

async def cashout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à!")
    
    user_id = query.from_user.id
    
    if user_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    game_data = active_games[user_id]
    multiplier = game_data.get('current_multiplier', 1.0)
    bet_amount = game_data['bet_amount']
    win_amount = bet_amount * multiplier
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    user_data[user_id]['balance'] += win_amount
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['games_won'] += 1
    user_data[user_id]['total_wagered'] += bet_amount
    user_data[user_id]['total_won'] += win_amount
    user_data[user_id]['max_multiplier'] = max(user_data[user_id]['max_multiplier'], multiplier)
    
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    del active_games[user_id]
    
    await query.edit_message_text(
        f"üéâ –í–´ –£–°–ü–ï–®–ù–û –ó–ê–ë–†–ê–õ–ò –í–´–ò–ì–†–´–®!\n\n"
        f"üí∞ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {win_amount:.0f} ‚≠ê\n"
        f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier:.2f}x\n"
        f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']:.0f} ‚≠ê",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_rocket"),
            InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        ]])
    )

async def stop_game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    
    user_id = query.from_user.id
    
    if user_id in active_games:
        bet_amount = active_games[user_id]['bet_amount']
        user_data[user_id]['balance'] += bet_amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
        del active_games[user_id]
        
        await query.edit_message_text(
            f"üõë –ò–ì–†–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê\n\n"
            f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {bet_amount} ‚≠ê\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']:.0f} ‚≠ê",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_rocket"),
                InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            ]])
        )

# üëë –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    total_balance = sum(data['balance'] for data in user_data.values())
    total_games = sum(data['total_games'] for data in user_data.values())
    total_wagered = sum(data['total_wagered'] for data in user_data.values())
    total_won = sum(data['total_won'] for data in user_data.values())
    
    # –†–∞—Å—á–µ—Ç RTP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    actual_rtp = (total_won / total_wagered * 100) if total_wagered > 0 else 0
    
    admin_text = f"""
üëë –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.0f} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
üí∏ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_wagered:.0f} ‚≠ê
üéÅ –í—ã–ø–ª–∞—á–µ–Ω–æ: {total_won:.0f} ‚≠ê
üìà –†–µ–∞–ª—å–Ω—ã–π RTP: {actual_rtp:.1f}%

‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(active_games)}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")]
    ]
    
    await query.edit_message_text(admin_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def add_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance <user_id> <amount>")
        return
    
    try:
        target_id = int(context.args[0])
        amount = float(context.args[1])
        
        user_data[target_id]['balance'] += amount
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚≠ê\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data[target_id]['balance']:.0f} ‚≠ê"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")

async def admin_add_balance_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await query.edit_message_text(
        "‚ûï –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/addbalance <user_id> <amount>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/addbalance 123456789 1000",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]])
    )

# üîÑ CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
async def handle_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "profile":
        await profile(update, context)
    elif callback_data == "play_rocket":
        await start_rocket_game(update, context)
    elif callback_data == "change_bet":
        await query.edit_message_text(
            "üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bet <—Å—É–º–º–∞>\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω: {ROCKET_CONFIG['min_bet']}-{ROCKET_CONFIG['max_bet']} ‚≠ê",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")
            ]])
        )
    elif callback_data == "admin_panel":
        await admin_panel(update, context)
    elif callback_data == "admin_stats":
        await query.edit_message_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]])
        )
    elif callback_data == "admin_add_balance":
        await admin_add_balance_handler(update, context)

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("bet", bet_command))
    application.add_handler(CommandHandler("rocket", rocket_command))
    application.add_handler(CommandHandler("addbalance", add_balance_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(handle_callbacks))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä—ã (–í–ê–ñ–ù–û: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å —è–≤–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏)
    application.add_handler(CallbackQueryHandler(cashout_handler, pattern="^cashout$"))
    application.add_handler(CallbackQueryHandler(stop_game_handler, pattern="^stop_game$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(CallbackQueryHandler(handle_callbacks))
    
    print("üöÄ Rocket Casino Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã: {ROCKET_CONFIG['time_step']} —Å–µ–∫")
    print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {ROCKET_CONFIG['max_multiplier']}x")
    print(f"üéØ RTP —Å–∏—Å—Ç–µ–º—ã: {ROCKET_CONFIG['rtp']*100}%")
    
    application.run_polling()

if __name__ == "__main__":
    main()
