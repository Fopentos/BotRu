import os
import logging
import asyncio
from datetime import datetime
from typing import Dict, List, Set

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    ChatJoinRequest
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode='HTML')
)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChannelAdd(StatesGroup):
    waiting_for_channel = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class ChannelDB:
    def __init__(self):
        self.channels: Dict[str, Dict] = {}
        self.user_channels: Dict[str, Set[str]] = {}
        self.processed_users: Set[str] = set()
    
    def add_channel(self, channel_id: str, channel_title: str, owner_id: str):
        self.channels[channel_id] = {
            'title': channel_title,
            'owner_id': owner_id,
            'is_active': True,
            'auto_approve': True,
            'total_approved': 0,
            'last_processed': None,
            'added_date': datetime.now()
        }
        
        if owner_id not in self.user_channels:
            self.user_channels[owner_id] = set()
        self.user_channels[owner_id].add(channel_id)
        
        logger.info(f"‚úÖ Channel added: {channel_title} (ID: {channel_id})")
        return True
    
    def get_user_channels(self, user_id: str) -> List[Dict]:
        user_channels = []
        for channel_id in self.user_channels.get(user_id, set()):
            if channel_data := self.channels.get(channel_id):
                user_channels.append({
                    'channel_id': channel_id,
                    **channel_data
                })
        return user_channels
    
    def get_channel(self, channel_id: str) -> Dict:
        return self.channels.get(channel_id)
    
    def mark_user_processed(self, channel_id: str, user_id: str):
        key = f"{channel_id}_{user_id}"
        self.processed_users.add(key)
    
    def is_user_processed(self, channel_id: str, user_id: str) -> bool:
        key = f"{channel_id}_{user_id}"
        return key in self.processed_users
    
    def increment_approved(self, channel_id: str):
        if channel := self.channels.get(channel_id):
            channel['total_approved'] = channel.get('total_approved', 0) + 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = ChannelDB()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
            [KeyboardButton(text="üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
        ],
        resize_keyboard=True
    )

def get_management_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
            [KeyboardButton(text="üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")]
        ],
        resize_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    await message.answer(
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö\n\n"
        "‚ö° <b>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è (3000+ –∑–∞—è–≤–æ–∫)</b>\n"
        "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É\n\n"
        "üìã <b>–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:</b>\n"
        "1. üì¢ –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\n"
        "2. üîÑ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
        "üîß <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ –í—Å–µ –ø—Ä–∞–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã",
        reply_markup=get_main_keyboard()
    )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
@dp.message(F.text == "üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel_info(message: types.Message, state: FSMContext):
    await message.answer(
        "üìã <b>–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:</b>\n\n"
        "1. <b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
        "2. <b>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> - –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏:\n"
        "   ‚úì –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "   ‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "   ‚úì –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏\n\n"
        "üîß <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞:</b>\n"
        "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "4. –í–∫–ª—é—á–∏—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞\n"
        "5. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    forwarded_chat = message.forward_from_chat
    
    if forwarded_chat.type != "channel":
        await message.answer("‚ùå <b>–≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        bot_member = await bot.get_chat_member(forwarded_chat.id, bot.id)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not isinstance(bot_member, types.ChatMemberAdministrator):
            await message.answer(
                f"‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ '{forwarded_chat.title}'!</b>\n\n"
                "üìã <b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞:</b>\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "4. –î–∞–π—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å–Ω–æ–≤–∞"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
        missing_permissions = []
        if not bot_member.can_invite_users:
            missing_permissions.append("‚ùå –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        if not bot_member.can_invite_users:  # –í aiogram —ç—Ç–æ –ø—Ä–∞–≤–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫
            missing_permissions.append("‚ùå –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏")
        
        if missing_permissions:
            await message.answer(
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ '{forwarded_chat.title}'!</b>\n\n"
                "–ë–æ—Ç—É –Ω—É–∂–Ω—ã –í–°–ï —ç—Ç–∏ –ø—Ä–∞–≤–∞:\n" +
                "\n".join(missing_permissions) +
                "\n\n–û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
        existing_channel = db.get_channel(str(forwarded_chat.id))
        if existing_channel:
            await message.answer(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª '{forwarded_chat.title}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üöÄ –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'",
                reply_markup=get_management_keyboard()
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É
        db.add_channel(str(forwarded_chat.id), forwarded_chat.title, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
        pending_count = 0
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
            join_requests = await bot.get_chat_join_requests(chat_id=forwarded_chat.id)
            async for _ in join_requests:
                pending_count += 1
        except Exception as e:
            logger.warning(f"Could not get join requests: {e}")
        
        success_message = (
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {forwarded_chat.title}\n"
            f"üÜî <b>ID:</b> <code>{forwarded_chat.id}</code>\n"
            f"‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:</b> {pending_count}\n\n"
            f"üöÄ <b>–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'</b>"
        )
        
        await message.answer(success_message, reply_markup=get_management_keyboard())
        
    except Exception as e:
        logger.error(f"Error processing forwarded message: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}")

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def list_user_channels(message: types.Message):
    user_id = str(message.from_user.id)
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await message.answer(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
            reply_markup=get_main_keyboard()
        )
        return
    
    channels_text = "üìã <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
    for i, channel in enumerate(user_channels, 1):
        status = "üü¢" if channel['is_active'] else "üî¥"
        approved = channel.get('total_approved', 0)
        channels_text += f"{status} <b>{i}. {channel['title']}</b>\n"
        channels_text += f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {approved} –∑–∞—è–≤–æ–∫\n"
        channels_text += f"   üÜî ID: <code>{channel['channel_id']}</code>\n\n"
    
    await message.answer(channels_text, reply_markup=get_management_keyboard())

# –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def channel_status(message: types.Message):
    user_id = str(message.from_user.id)
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await message.answer(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channel = user_channels[0]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏
        pending_count = 0
        try:
            join_requests = await bot.get_chat_join_requests(chat_id=int(channel['channel_id']))
            async for _ in join_requests:
                pending_count += 1
        except Exception as e:
            logger.warning(f"Could not get join requests: {e}")
        
        total_approved = channel.get('total_approved', 0)
        
        status_text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞:</b> {channel['title']}\n\n"
            f"‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:</b> {pending_count}\n"
            f"‚úÖ <b>–í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ:</b> {total_approved}\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if channel['is_active'] else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"‚ö° <b>–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ:</b> {'üü¢ –í–ö–õ' if channel['auto_approve'] else 'üî¥ –í–´–ö–õ'}\n\n"
        )
        
        if pending_count > 0:
            estimated_time = pending_count / 10  # 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
            if estimated_time > 60:
                status_text += f"‚è± <b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {estimated_time/60:.1f} –º–∏–Ω—É—Ç\n"
            else:
                status_text += f"‚è± <b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {estimated_time:.1f} —Å–µ–∫—É–Ω–¥\n"
            
            status_text += f"üöÄ <b>–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'</b>"
        else:
            status_text += "üéâ <b>–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫!</b>"
        
        await message.answer(status_text, reply_markup=get_management_keyboard())
        
    except Exception as e:
        logger.error(f"Error getting status: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:</b> {e}")

# –¢—É—Ä–±–æ-—Ä–µ–∂–∏–º –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫
@dp.message(F.text == "üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")
async def turbo_approve(message: types.Message):
    user_id = str(message.from_user.id)
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await message.answer(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channel = user_channels[0]
    channel_id = int(channel['channel_id'])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        join_requests = await bot.get_chat_join_requests(chat_id=channel_id)
        requests_list = []
        async for request in join_requests:
            requests_list.append(request)
        
        total = len(requests_list)
        
        if total == 0:
            await message.answer("üéâ <b>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è!</b>")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è
        status_msg = await message.answer(
            f"üöÄ <b>–ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò</b>\n\n"
            f"üìù <b>–ö–∞–Ω–∞–ª:</b> {channel['title']}\n"
            f"üìä <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫:</b> {total}\n"
            f"‚ö° <b>–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...</b>"
        )
        
        approved = 0
        failed = 0
        
        for i, request in enumerate(requests_list):
            try:
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                await bot.approve_chat_join_request(
                    chat_id=channel_id,
                    user_id=request.user.id
                )
                approved += 1
                db.increment_approved(channel['channel_id'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 20 –∑–∞—è–≤–æ–∫
                if i % 20 == 0:
                    await status_msg.edit_text(
                        f"üöÄ <b>–û–ë–†–ê–ë–û–¢–ö–ê</b>\n\n"
                        f"üìù <b>–ö–∞–Ω–∞–ª:</b> {channel['title']}\n"
                        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {i+1}/{total}\n"
                        f"‚úÖ <b>–ü—Ä–∏–Ω—è—Ç–æ:</b> {approved}\n"
                        f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed}"
                    )
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
                failed += 1
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await status_msg.edit_text(
            f"üéâ <b>–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
            f"üìù <b>–ö–∞–Ω–∞–ª:</b> {channel['title']}\n"
            f"üìä <b>–ò—Ç–æ–≥–∏:</b>\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ:</b> {approved}/{total}\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed}\n\n"
            f"üí∞ <b>–í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ –∫–∞–Ω–∞–ª–µ:</b> {channel['total_approved']}"
        )
        
    except Exception as e:
        logger.error(f"Error in turbo_approve: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
@dp.chat_join_request()
async def handle_chat_join_request(chat_join: ChatJoinRequest):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –ø—Ä–∏ –∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏"""
    channel_id = str(chat_join.chat.id)
    user_id = chat_join.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω
    channel = db.get_channel(channel_id)
    if not channel or not channel['is_active'] or not channel['auto_approve']:
        return
    
    try:
        # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
        await chat_join.approve()
        db.increment_approved(channel_id)
        db.mark_user_processed(channel_id, str(user_id))
        
        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞ –∑–∞—è–≤–∫–∞ –æ—Ç {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel['title']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")

# –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
async def process_pending_requests():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫"""
    for channel_id, channel in db.channels.items():
        if not channel['is_active'] or not channel['auto_approve']:
            continue
            
        try:
            join_requests = await bot.get_chat_join_requests(chat_id=int(channel_id))
            requests_list = []
            async for request in join_requests:
                requests_list.append(request)
            
            if not requests_list:
                continue
            
            logger.info(f"üîÑ Processing {len(requests_list)} requests for {channel['title']}")
            
            approved = 0
            for request in requests_list:
                if db.is_user_processed(channel_id, str(request.user.id)):
                    continue
                    
                try:
                    await bot.approve_chat_join_request(
                        chat_id=int(channel_id),
                        user_id=request.user.id
                    )
                    approved += 1
                    db.increment_approved(channel_id)
                    db.mark_user_processed(channel_id, str(request.user.id))
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"Error approving request: {e}")
            
            if approved > 0:
                logger.info(f"‚úÖ Approved {approved} requests for {channel['title']}")
            
            channel['last_processed'] = datetime.now()
            
        except Exception as e:
            logger.error(f"Error processing requests for {channel['title']}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    scheduler = AsyncIOScheduler()
    scheduler.add_job(process_pending_requests, 'interval', seconds=30)
    scheduler.start()
    
    logger.info("‚úÖ –ë–æ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
