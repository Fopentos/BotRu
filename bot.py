import os
import logging
import asyncio
from telegram import Update, Bot, ChatMemberAdministrator
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError, BadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found in environment variables!")
    exit(1)

# –ü—Ä–æ—Å—Ç–∞—è in-memory –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ SQLite)
class SimpleDB:
    def __init__(self):
        self.channels = {}
        self.admins = {}
        self.stats = {}
    
    def add_channel(self, channel_id, channel_username, owner_id):
        self.channels[channel_id] = {
            'channel_username': channel_username,
            'owner_id': owner_id,
            'is_active': True,
            'auto_approve': True,
            'max_daily_approvals': 1000
        }
        
        if channel_id not in self.admins:
            self.admins[channel_id] = set()
        self.admins[channel_id].add(owner_id)
    
    def get_user_channels(self, user_id):
        return [channel for channel_id, channel in self.channels.items() 
                if user_id in self.admins.get(channel_id, set())]
    
    def get_channel(self, channel_username):
        for channel_id, channel in self.channels.items():
            if channel['channel_username'] == channel_username:
                return channel
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = SimpleDB()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "/list_channels - –ú–æ–∏ –∫–∞–Ω–∞–ª—ã\n"
        "/turbo @channel - –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏\n"
        "/help - –ü–æ–º–æ—â—å"
    )

async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "–ü—Ä–∏–º–µ—Ä: /add_channel @my_channel"
        )
        return
    
    channel_username = context.args[0].lstrip('@')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞
        bot = context.bot
        chat = await bot.get_chat(f"@{channel_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        bot_member = await chat.get_member(bot.id)
        
        if not isinstance(bot_member, ChatMemberAdministrator):
            await update.message.reply_text(
                "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º:\n"
                "‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚úì –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
        if not (bot_member.can_invite_users and bot_member.can_promote_members):
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\n"
                "–ë–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞:\n"
                "‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚úì –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_channel(str(chat.id), channel_username, user_id)
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            "‚ö° –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏\n"
            "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /turbo @channel –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫"
        )
        
    except BadRequest as e:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞"
        )
    except Exception as e:
        logger.error(f"Error adding channel: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
        )
        return
    
    channels_text = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
    for channel in user_channels:
        status = "üü¢" if channel['is_active'] else "üî¥"
        channels_text += f"{status} @{channel['channel_username']}\n"
    
    channels_text += "\nüöÄ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫: /turbo @channel"
    await update.message.reply_text(channels_text)

async def turbo_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ç—É—Ä–±–æ-–ø—Ä–∏–Ω—è—Ç–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /turbo @channel")
        return
    
    channel_username = context.args[0].lstrip('@')
    channel = db.get_channel(channel_username)
    
    if not channel or user_id not in db.admins.get(channel['channel_id'], set()):
        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        join_requests = await context.bot.get_chat_join_requests(
            chat_id=channel['channel_id']
        )
        
        requests_list = list(join_requests)
        total = len(requests_list)
        
        if total == 0:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º
        message = await update.message.reply_text(f"üöÄ –ó–∞–ø—É—Å–∫ TURBO —Ä–µ–∂–∏–º–∞...\n–û–±—Ä–∞–±–æ—Ç–∫–∞ {total} –∑–∞—è–≤–æ–∫")
        
        approved = 0
        failed = 0
        start_time = time.time()
        
        # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        batch_size = 10
        
        for i in range(0, total, batch_size):
            batch = requests_list[i:i + batch_size]
            
            tasks = []
            for request in batch:
                task = context.bot.approve_chat_join_request(
                    chat_id=channel['channel_id'],
                    user_id=request.user.id
                )
                tasks.append(task)
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            batch_approved = sum(1 for r in results if not isinstance(r, Exception))
            batch_failed = len(results) - batch_approved
            
            approved += batch_approved
            failed += batch_failed
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞—è–≤–æ–∫
            if i % 100 == 0 or i + batch_size >= total:
                elapsed = time.time() - start_time
                speed = approved / elapsed if elapsed > 0 else 0
                
                progress = (
                    f"üöÄ TURBO —Ä–µ–∂–∏–º\n"
                    f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {approved}/{total}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} –∑–∞—è–≤–æ–∫/—Å–µ–∫"
                )
                try:
                    await message.edit_text(progress)
                except:
                    pass
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
            await asyncio.sleep(0.05)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        await message.edit_text(
            f"üéâ TURBO —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {approved}/{total}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
            f"‚è± –í—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫\n"
            f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {approved/total_time:.1f} –∑–∞—è–≤–æ–∫/—Å–µ–∫\n\n"
            f"üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel"
        )
        
    except Exception as e:
        logger.error(f"Error in turbo mode: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **Auto-Join Bot - –ü–æ–º–æ—â—å**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add_channel @username - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - –ú–æ–∏ –∫–∞–Ω–∞–ª—ã
/turbo @channel - –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞: "–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel @–≤–∞—à_–∫–∞–Ω–∞–ª
4. –î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è: /turbo @–≤–∞—à_–∫–∞–Ω–∞–ª

**–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã:**
- –î–æ 1000+ –∑–∞—è–≤–æ–∫ –≤ –º–∏–Ω—É—Ç—É
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    """
    await update.message.reply_text(help_text)

async def process_join_requests(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫"""
    for channel_id, channel in db.channels.items():
        if not channel['is_active'] or not channel['auto_approve']:
            continue
            
        try:
            join_requests = await context.bot.get_chat_join_requests(chat_id=channel_id)
            requests_list = list(join_requests)
            
            if not requests_list:
                continue
                
            # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏
            batch_size = 5
            for i in range(0, len(requests_list), batch_size):
                batch = requests_list[i:i + batch_size]
                
                tasks = []
                for request in batch:
                    task = context.bot.approve_chat_join_request(
                        chat_id=channel_id,
                        user_id=request.user.id
                    )
                    tasks.append(task)
                
                await asyncio.gather(*tasks, return_exceptions=True)
                await asyncio.sleep(0.1)
                
            logger.info(f"Processed {len(requests_list)} requests for {channel['channel_username']}")
            
        except Exception as e:
            logger.error(f"Error processing requests for {channel['channel_username']}: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("list_channels", list_channels))
    application.add_handler(CommandHandler("turbo", turbo_approve))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        process_join_requests,
        'interval',
        seconds=30,
        args=[application]
    )
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ Railway –ª–∏ –º—ã
    if 'RAILWAY_STATIC_URL' in os.environ or 'PORT' in os.environ:
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
        webhook_url = os.environ.get('RAILWAY_STATIC_URL', '')
        if webhook_url:
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=BOT_TOKEN,
                webhook_url=f"{webhook_url}/{BOT_TOKEN}"
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling –∫–∞–∫ fallback
            application.run_polling()
    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        application.run_polling()

if __name__ == '__main__':
    main()
