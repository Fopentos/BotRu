import os
import logging
import asyncio
from telegram import Update, Bot, ChatMemberAdministrator, Chat
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError, BadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found in environment variables!")
    exit(1)

# –ü—Ä–æ—Å—Ç–∞—è in-memory –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class SimpleDB:
    def __init__(self):
        self.channels = {}
        self.admins = {}
        self.stats = {}
        self.processed_users = set()  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    def add_channel(self, channel_id, channel_username, owner_id, chat_type):
        self.channels[channel_id] = {
            'channel_username': channel_username,
            'owner_id': owner_id,
            'is_active': True,
            'auto_approve': True,
            'chat_type': chat_type,
            'max_daily_approvals': 1000,
            'last_processed': None
        }
        
        if channel_id not in self.admins:
            self.admins[channel_id] = set()
        self.admins[channel_id].add(owner_id)
    
    def get_user_channels(self, user_id):
        return [channel for channel_id, channel in self.channels.items() 
                if user_id in self.admins.get(channel_id, set())]
    
    def get_channel(self, channel_username):
        for channel_id, channel in self.channels.items():
            if channel['channel_username'] == channel_username:
                return channel
        return None
    
    def get_channel_by_id(self, channel_id):
        return self.channels.get(channel_id)

    def mark_user_processed(self, channel_id, user_id):
        key = f"{channel_id}_{user_id}"
        self.processed_users.add(key)
    
    def is_user_processed(self, channel_id, user_id):
        key = f"{channel_id}_{user_id}"
        return key in self.processed_users

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = SimpleDB()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É\n"
        "/list_channels - –ú–æ–∏ –∫–∞–Ω–∞–ª—ã\n"
        "/turbo @channel - –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É"
    )

async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "–ü—Ä–∏–º–µ—Ä: /add_channel @my_channel\n"
            "–ò–ª–∏: /add_channel @my_group"
        )
        return
    
    channel_username = context.args[0].lstrip('@')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞
        bot = context.bot
        chat = await bot.get_chat(f"@{channel_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        bot_member = await chat.get_member(bot.id)
        
        if not isinstance(bot_member, ChatMemberAdministrator):
            await update.message.reply_text(
                "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
                "‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚úì –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                "‚úì –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
        required_permissions = []
        
        if chat.type in [Chat.CHANNEL, Chat.SUPERGROUP]:
            if not bot_member.can_invite_users:
                required_permissions.append("‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            if not bot_member.can_promote_members:
                required_permissions.append("‚úì –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            if not bot_member.can_restrict_members:
                required_permissions.append("‚úì –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã")
            return
        
        if required_permissions:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\n"
                "–ë–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞:\n" + "\n".join(required_permissions)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_channel(str(chat.id), channel_username, user_id, chat.type)
        
        await update.message.reply_text(
            f"‚úÖ {'–ö–∞–Ω–∞–ª' if chat.type == Chat.CHANNEL else '–ì—Ä—É–ø–ø–∞'} @{channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìù –¢–∏–ø: {'–ö–∞–Ω–∞–ª' if chat.type == Chat.CHANNEL else '–ì—Ä—É–ø–ø–∞'}\n"
            "‚ö° –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏\n"
            "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /turbo @channel –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫\n\n"
            "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É"
        )
        
    except BadRequest as e:
        error_message = str(e).lower()
        if "chat not found" in error_message:
            await update.message.reply_text(
                "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –ß–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞"
            )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"Error adding channel: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞")

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É"
        )
        return
    
    channels_text = "üìã –í–∞—à–∏ —á–∞—Ç—ã:\n\n"
    for channel in user_channels:
        status = "üü¢" if channel['is_active'] else "üî¥"
        chat_type = "–ö–∞–Ω–∞–ª" if channel['chat_type'] == Chat.CHANNEL else "–ì—Ä—É–ø–ø–∞"
        channels_text += f"{status} @{channel['channel_username']} ({chat_type})\n"
    
    channels_text += "\nüöÄ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫: /turbo @channel"
    await update.message.reply_text(channels_text)

async def approve_single_request(context, channel_id, user_id, channel_username):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await context.bot.approve_chat_join_request(
            chat_id=channel_id,
            user_id=user_id
        )
        logger.info(f"‚úÖ Approved user {user_id} for @{channel_username}")
        return True
    except TelegramError as e:
        error_msg = str(e).lower()
        if "user not found" in error_msg or "user already participant" in error_msg:
            logger.info(f"‚ö†Ô∏è User {user_id} already approved or not found for @{channel_username}")
        elif "too many requests" in error_msg:
            logger.warning(f"‚ö†Ô∏è Rate limit hit for @{channel_username}, slowing down...")
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
        else:
            logger.error(f"‚ùå Error approving user {user_id} for @{channel_username}: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Unexpected error approving user {user_id}: {e}")
        return False

async def turbo_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ç—É—Ä–±–æ-–ø—Ä–∏–Ω—è—Ç–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username —á–∞—Ç–∞: /turbo @channel")
        return
    
    channel_username = context.args[0].lstrip('@')
    channel = db.get_channel(channel_username)
    
    if not channel or user_id not in db.admins.get(channel['channel_id'], set()):
        await update.message.reply_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        join_requests = await context.bot.get_chat_join_requests(
            chat_id=channel['channel_id']
        )
        
        requests_list = list(join_requests)
        total = len(requests_list)
        
        if total == 0:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º
        message = await update.message.reply_text(
            f"üöÄ –ó–∞–ø—É—Å–∫ TURBO —Ä–µ–∂–∏–º–∞...\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {total}\n"
            f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É\n"
            f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total/10:.1f} —Å–µ–∫—É–Ω–¥"
        )
        
        approved = 0
        failed = 0
        start_time = time.time()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ - 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
        requests_per_second = 10
        batch_delay = 1.0 / requests_per_second  # 0.1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏
        
        for i, request in enumerate(requests_list):
            if db.is_user_processed(channel['channel_id'], request.user.id):
                logger.info(f"‚è≠Ô∏è Skipping already processed user {request.user.id}")
                continue
                
            success = await approve_single_request(
                context, 
                channel['channel_id'], 
                request.user.id,
                channel['channel_username']
            )
            
            if success:
                approved += 1
                db.mark_user_processed(channel['channel_id'], request.user.id)
            else:
                failed += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∑–∞—è–≤–æ–∫ –∏–ª–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            if i % 50 == 0 or i == total - 1:
                elapsed = time.time() - start_time
                speed = approved / elapsed if elapsed > 0 else 0
                remaining = total - i - 1
                eta = remaining / requests_per_second if speed > 0 else 0
                
                progress = (
                    f"üöÄ TURBO —Ä–µ–∂–∏–º\n"
                    f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {approved}/{total}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} –∑–∞—è–≤–æ–∫/—Å–µ–∫\n"
                    f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: ~{eta:.1f} —Å–µ–∫"
                )
                try:
                    await message.edit_text(progress)
                except:
                    pass
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É)
            if i < total - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏
                await asyncio.sleep(batch_delay)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        actual_speed = approved / total_time if total_time > 0 else 0
        
        await message.edit_text(
            f"üéâ TURBO —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {approved}/{total}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
            f"‚è± –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {total_time:.1f} —Å–µ–∫\n"
            f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {actual_speed:.1f} –∑–∞—è–≤–æ–∫/—Å–µ–∫\n\n"
            f"üí° –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        
    except Exception as e:
        logger.error(f"Error in turbo mode: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def process_join_requests(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    for channel_id, channel in db.channels.items():
        if not channel['is_active'] or not channel['auto_approve']:
            continue
            
        try:
            join_requests = await context.bot.get_chat_join_requests(chat_id=channel_id)
            requests_list = list(join_requests)
            
            if not requests_list:
                continue
            
            logger.info(f"Processing {len(requests_list)} requests for {channel['channel_username']}")
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ - 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
            requests_per_second = 10
            batch_delay = 1.0 / requests_per_second
            
            processed = 0
            for request in requests_list:
                if db.is_user_processed(channel_id, request.user.id):
                    continue
                    
                success = await approve_single_request(
                    context, 
                    channel_id, 
                    request.user.id,
                    channel['channel_username']
                )
                
                if success:
                    processed += 1
                    db.mark_user_processed(channel_id, request.user.id)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                await asyncio.sleep(batch_delay)
            
            if processed > 0:
                logger.info(f"‚úÖ Approved {processed} requests for {channel['channel_username']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            channel['last_processed'] = datetime.now()
            
        except TelegramError as e:
            error_msg = str(e).lower()
            if "chat not found" in error_msg or "bot was kicked" in error_msg:
                logger.warning(f"Bot was removed from {channel['channel_username']}")
                channel['is_active'] = False
            elif "not enough rights" in error_msg:
                logger.warning(f"Not enough rights in {channel['channel_username']}")
            else:
                logger.error(f"Error processing requests for {channel['channel_username']}: {e}")
        except Exception as e:
            logger.error(f"Unexpected error for {channel['channel_username']}: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **Auto-Join Bot - –ü–æ–º–æ—â—å**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add_channel @username - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É
/list_channels - –ú–æ–∏ —á–∞—Ç—ã
/turbo @channel - –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞: "–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel @–≤–∞—à_—á–∞—Ç
4. –î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è: /turbo @–≤–∞—à_—á–∞—Ç

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —á–∞—Ç–æ–≤:**
- üì¢ –ü—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
- üîí –ó–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã  
- üë• –°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
- üîê –ó–∞–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã

**–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã:**
- ‚ö° –î–æ 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
- üõ° –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
- üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    """
    await update.message.reply_text(help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("list_channels", list_channels))
    application.add_handler(CommandHandler("turbo", turbo_approve))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        process_join_requests,
        'interval',
        seconds=15,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        args=[application]
    )
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ Railway –ª–∏ –º—ã
    if 'RAILWAY_STATIC_URL' in os.environ or 'PORT' in os.environ:
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
        webhook_url = os.environ.get('RAILWAY_STATIC_URL', '')
        if webhook_url:
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=BOT_TOKEN,
                webhook_url=f"{webhook_url}/{BOT_TOKEN}"
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling –∫–∞–∫ fallback
            logger.info("üöÄ Starting bot in POLLING mode...")
            application.run_polling()
    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("üöÄ Starting bot in POLLING mode...")
        application.run_polling()

if __name__ == '__main__':
    main()
