import os
import logging
import asyncio
from telegram import (
    Update, 
    Bot, 
    ChatMemberAdministrator, 
    Chat,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.error import TelegramError, BadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found in environment variables!")
    exit(1)

# –ü—Ä–æ—Å—Ç–∞—è in-memory –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class SimpleDB:
    def __init__(self):
        self.channels = {}
        self.admins = {}
        self.stats = {}
        self.processed_users = set()
    
    def add_channel(self, channel_id, channel_title, owner_id, chat_type):
        self.channels[channel_id] = {
            'channel_title': channel_title,
            'owner_id': owner_id,
            'is_active': True,
            'auto_approve': True,
            'chat_type': chat_type,
            'max_daily_approvals': 5000,
            'last_processed': None,
            'total_approved': 0
        }
        
        if channel_id not in self.admins:
            self.admins[channel_id] = set()
        self.admins[channel_id].add(owner_id)
        logger.info(f"‚úÖ Channel added: {channel_title} (ID: {channel_id})")
    
    def get_user_channels(self, user_id):
        return [channel for channel_id, channel in self.channels.items() 
                if user_id in self.admins.get(channel_id, set())]
    
    def get_channel_by_id(self, channel_id):
        return self.channels.get(channel_id)
    
    def mark_user_processed(self, channel_id, user_id):
        key = f"{channel_id}_{user_id}"
        self.processed_users.add(key)
    
    def is_user_processed(self, channel_id, user_id):
        key = f"{channel_id}_{user_id}"
        return key in self.processed_users
    
    def increment_approved(self, channel_id):
        if channel_id in self.channels:
            self.channels[channel_id]['total_approved'] += 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = SimpleDB()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
        [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö\n\n"
        "‚ö° **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è (3000+ –∑–∞—è–≤–æ–∫)**\n"
        "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É\n\n"
        "üìã **–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:**\n"
        "1. üì¢ –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\n"
        "2. üîÑ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
        "3. üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n\n"
        "üîß **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
        "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ –í—Å–µ –ø—Ä–∞–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã",
        reply_markup=reply_markup
    )

async def handle_forwarded_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = str(update.effective_user.id)
    
    if not update.message.forward_from_chat:
        return
    
    forwarded_chat = update.message.forward_from_chat
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if forwarded_chat.type != Chat.CHANNEL:
        await update.message.reply_text(
            "‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞."
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        bot = context.bot
        chat = await bot.get_chat(forwarded_chat.id)
        
        logger.info(f"Processing forwarded channel: {chat.title} (ID: {chat.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        try:
            bot_member = await chat.get_member(bot.id)
        except BadRequest as e:
            if "Bot is not a member" in str(e):
                await update.message.reply_text(
                    f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ '{chat.title}'!\n\n"
                    "üìã **–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞:**\n"
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                    "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "4. –î–∞–π—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞:\n"
                    "   ‚úì –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                    "   ‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                    "   ‚úì –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å–Ω–æ–≤–∞"
                )
                return
            else:
                raise e
        
        if not isinstance(bot_member, ChatMemberAdministrator):
            await update.message.reply_text(
                f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ '{chat.title}'!\n"
                "–î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        missing_permissions = []
        if not bot_member.can_invite_users:
            missing_permissions.append("‚ùå –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        if not bot_member.can_promote_members:
            missing_permissions.append("‚ùå –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        if not bot_member.can_restrict_members:
            missing_permissions.append("‚ùå –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        if missing_permissions:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ '{chat.title}'!\n\n"
                "–ë–æ—Ç—É –Ω—É–∂–Ω—ã –í–°–ï —ç—Ç–∏ –ø—Ä–∞–≤–∞:\n" +
                "\n".join(missing_permissions) +
                "\n\n–û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
        existing_channel = db.get_channel_by_id(str(chat.id))
        if existing_channel:
            keyboard = [
                [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
                [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –ö–∞–Ω–∞–ª '{chat.title}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üöÄ –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'",
                reply_markup=reply_markup
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_channel(str(chat.id), chat.title, user_id, chat.type)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏
        try:
            join_requests = await bot.get_chat_join_requests(chat.id)
            pending_count = len(list(join_requests))
        except:
            pending_count = 0
        
        keyboard = [
            [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        success_message = (
            f"‚úÖ **–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
            f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat.title}\n"
            f"‚è≥ **–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:** {pending_count}\n\n"
            f"üöÄ **–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'**"
        )
        
        await update.message.reply_text(success_message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error processing forwarded message: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_invite_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    user_id = str(update.effective_user.id)
    text = update.message.text
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if not any(x in text for x in ['t.me/', 'telegram.me/', '+', '@']):
        return
    
    await update.message.reply_text(
        "üîó **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞**\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
        "üìã **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã:**\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
        "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ!"
    )

async def handle_button_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = str(update.effective_user.id)
    text = update.message.text
    
    logger.info(f"Button pressed: {text} by user {user_id}")
    
    if text == "üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
        keyboard = [
            [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üìã **–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:**\n\n"
            "1. **–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "2. **–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** - –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏:\n"
            "   ‚úì –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            "   ‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "   ‚úì –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏\n\n"
            "üîß **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞:**\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n" 
            "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "4. –í–∫–ª—é—á–∏—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞\n"
            "5. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É",
            reply_markup=reply_markup
        )
        
    elif text == "üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏":
        await turbo_approve(update, context)
        
    elif text == "üìä –°—Ç–∞—Ç—É—Å":
        await status_command(update, context)
        
    elif text == "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã":
        await list_channels(update, context)
        
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
            [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        keyboard = [
            [KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
            reply_markup=reply_markup
        )
        return
    
    channels_text = "üìã **–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:**\n\n"
    for i, channel in enumerate(user_channels, 1):
        status = "üü¢" if channel['is_active'] else "üî¥"
        approved = channel.get('total_approved', 0)
        channels_text += f"{status} **{i}. {channel['channel_title']}**\n"
        channels_text += f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {approved} –∑–∞—è–≤–æ–∫\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(channels_text, reply_markup=reply_markup)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        keyboard = [
            [KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
            reply_markup=reply_markup
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
    channel = user_channels[0]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏
        join_requests = await context.bot.get_chat_join_requests(
            chat_id=channel['channel_id']
        )
        
        pending_count = len(list(join_requests))
        total_approved = channel.get('total_approved', 0)
        
        status_text = (
            f"üìä **–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞:** {channel['channel_title']}\n\n"
            f"‚è≥ **–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:** {pending_count}\n"
            f"‚úÖ **–í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ:** {total_approved}\n"
            f"üîÑ **–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if channel['is_active'] else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"‚ö° **–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ:** {'üü¢ –í–ö–õ' if channel['auto_approve'] else 'üî¥ –í–´–ö–õ'}\n\n"
        )
        
        if pending_count > 0:
            estimated_time = pending_count / 10  # 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
            if estimated_time > 60:
                status_text += f"‚è± **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {estimated_time/60:.1f} –º–∏–Ω—É—Ç\n"
            else:
                status_text += f"‚è± **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {estimated_time:.1f} —Å–µ–∫—É–Ω–¥\n"
            
            status_text += f"üöÄ **–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'**"
        else:
            status_text += "üéâ **–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫!**"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"), KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(status_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error getting status: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def turbo_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–£–†–ë–û-—Ä–µ–∂–∏–º –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        keyboard = [
            [KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
            reply_markup=reply_markup
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
    channel = user_channels[0]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        join_requests = await context.bot.get_chat_join_requests(
            chat_id=channel['channel_id']
        )
        
        requests_list = list(join_requests)
        total = len(requests_list)
        
        if total == 0:
            keyboard = [
                [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üéâ **–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è!**",
                reply_markup=reply_markup
            )
            return
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
        estimated_time = total / 10  # 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
        time_display = f"{estimated_time/60:.1f} –º–∏–Ω—É—Ç" if estimated_time > 60 else f"{estimated_time:.0f} —Å–µ–∫—É–Ω–¥"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º
        message = await update.message.reply_text(
            f"üöÄ **–ó–ê–ü–£–°–ö TURBO-–†–ï–ñ–ò–ú–ê**\n\n"
            f"üìù **–ö–∞–Ω–∞–ª:** {channel['channel_title']}\n"
            f"üìä **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫:** {total}\n"
            f"‚ö° **–°–∫–æ—Ä–æ—Å—Ç—å:** 10 –∑–∞—è–≤–æ–∫/—Å–µ–∫—É–Ω–¥—É\n"
            f"‚è± **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** {time_display}\n"
            f"üîß **–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...**"
        )
        
        approved = 0
        failed = 0
        start_time = time.time()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ - 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
        requests_per_second = 10
        batch_delay = 1.0 / requests_per_second  # 0.1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏
        
        for i, request in enumerate(requests_list):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if db.is_user_processed(channel['channel_id'], request.user.id):
                continue
                
            success = await approve_single_request(
                context, 
                channel['channel_id'], 
                request.user.id,
                channel['channel_title']
            )
            
            if success:
                approved += 1
                db.mark_user_processed(channel['channel_id'], request.user.id)
            else:
                failed += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞—è–≤–æ–∫
            if i % 100 == 0 or i == total - 1:
                elapsed = time.time() - start_time
                current_speed = approved / elapsed if elapsed > 0 else 0
                remaining = total - i - 1
                eta = remaining / requests_per_second if current_speed > 0 else 0
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ETA
                if eta > 60:
                    eta_display = f"{eta/60:.1f} –º–∏–Ω"
                else:
                    eta_display = f"{eta:.0f} —Å–µ–∫"
                
                progress = (
                    f"üöÄ **TURBO-–†–ï–ñ–ò–ú**\n\n"
                    f"üìù **–ö–∞–Ω–∞–ª:** {channel['channel_title']}\n"
                    f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {i+1}/{total}\n"
                    f"‚úÖ **–ü—Ä–∏–Ω—è—Ç–æ:** {approved}\n"
                    f"‚ùå **–û—à–∏–±–æ–∫:** {failed}\n"
                    f"‚ö° **–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:** {current_speed:.1f}/—Å–µ–∫\n"
                    f"‚è± **–û—Å—Ç–∞–ª–æ—Å—å:** ~{eta_display}"
                )
                try:
                    await message.edit_text(progress)
                except:
                    pass
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É)
            if i < total - 1:
                await asyncio.sleep(batch_delay)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        actual_speed = approved / total_time if total_time > 0 else 0
        
        result_message = (
            f"üéâ **TURBO-–†–ï–ñ–ò–ú –ó–ê–í–ï–†–®–ï–ù!**\n\n"
            f"üìù **–ö–∞–Ω–∞–ª:** {channel['channel_title']}\n"
            f"üìä **–ò–¢–û–ì–ò:**\n"
            f"‚úÖ **–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ:** {approved}/{total}\n"
            f"‚ùå **–û—à–∏–±–æ–∫:** {failed}\n"
            f"‚è± **–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:** {total_time:.1f} —Å–µ–∫\n"
            f"‚ö° **–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:** {actual_speed:.1f} –∑–∞—è–≤–æ–∫/—Å–µ–∫\n\n"
        )
        
        if approved == total:
            result_message += "üéØ **–í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!**"
        else:
            result_message += "‚ö†Ô∏è **–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å**"
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
            [KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await message.edit_text(result_message)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in turbo mode: {e}")
        await update.message.reply_text(f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:** {str(e)}")

async def approve_single_request(context, channel_id, user_id, channel_title):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await context.bot.approve_chat_join_request(
            chat_id=channel_id,
            user_id=user_id
        )
        db.increment_approved(channel_id)
        logger.info(f"‚úÖ Approved user {user_id} for {channel_title}")
        return True
        
    except TelegramError as e:
        error_msg = str(e).lower()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–ª –∑–∞—è–≤–∫—É
        if "user not found" in error_msg or "user already participant" in error_msg:
            logger.info(f"‚ö†Ô∏è User {user_id} already approved or not found for {channel_title}")
            return True  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, —Ç.–∫. –∑–∞—è–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç
            
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –∑–∞–º–µ–¥–ª—è–µ–º—Å—è
        elif "too many requests" in error_msg:
            logger.warning(f"‚ö†Ô∏è Rate limit hit for {channel_title}, slowing down...")
            await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
            return False
            
        # –ù–µ—Ç –ø—Ä–∞–≤ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
        elif "not enough rights" in error_msg:
            logger.error(f"‚ùå Not enough rights in {channel_title}. Deactivating.")
            channel = db.get_channel_by_id(channel_id)
            if channel:
                channel['is_active'] = False
            return False
            
        else:
            logger.error(f"‚ùå Error approving user {user_id} for {channel_title}: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Unexpected error approving user {user_id}: {e}")
        return False

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **Auto-Join Bot –¥–ª—è –ü–†–ò–í–ê–¢–ù–´–• –ö–ê–ù–ê–õ–û–í**

‚ö° **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è 3000+ –∑–∞—è–≤–æ–∫**

**üîó –°–ü–û–°–û–ë –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê:**
1. **–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è** - –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
2. **–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** - –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞:
   ‚úì –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
   ‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
   ‚úì –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏

**üìã –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø:**
üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é
üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ - –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å –í–°–ï –∑–∞—è–≤–∫–∏  
üìä –°—Ç–∞—Ç—É—Å - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤

**‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:**
- –î–æ 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
- 3200 –∑–∞—è–≤–æ–∫ = ~5.5 –º–∏–Ω—É—Ç
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

**üöÄ –î–õ–Ø 3200 –ó–ê–Ø–í–û–ö:**
1. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
2. –ù–∞–∂–º–∏—Ç–µ 'üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'
3. –ñ–¥–µ–º ~5.5 –º–∏–Ω—É—Ç
4. –ì–æ—Ç–æ–≤–æ!
    """
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
        [KeyboardButton("üöÄ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(help_text, reply_markup=reply_markup)

async def process_join_requests(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
    channels_count = len(db.channels)
    logger.info(f"üîç Checking {channels_count} channels for join requests")
    
    for channel_id, channel in db.channels.items():
        if not channel['is_active'] or not channel['auto_approve']:
            continue
            
        try:
            join_requests = await context.bot.get_chat_join_requests(chat_id=channel_id)
            requests_list = list(join_requests)
            
            if not requests_list:
                continue
            
            logger.info(f"üîÑ Processing {len(requests_list)} new requests for {channel['channel_title']}")
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ - 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
            requests_per_second = 10
            batch_delay = 1.0 / requests_per_second
            
            processed = 0
            for request in requests_list:
                if db.is_user_processed(channel_id, request.user.id):
                    continue
                    
                success = await approve_single_request(
                    context, 
                    channel_id, 
                    request.user.id,
                    channel['channel_title']
                )
                
                if success:
                    processed += 1
                    db.mark_user_processed(channel_id, request.user.id)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                await asyncio.sleep(batch_delay)
            
            if processed > 0:
                logger.info(f"‚úÖ Approved {processed} new requests for {channel['channel_title']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            channel['last_processed'] = datetime.now()
            
        except TelegramError as e:
            error_msg = str(e).lower()
            if "chat not found" in error_msg or "bot was kicked" in error_msg:
                logger.warning(f"‚ùå Bot was removed from {channel['channel_title']}")
                channel['is_active'] = False
            elif "not enough rights" in error_msg:
                logger.warning(f"‚ùå Not enough rights in {channel['channel_title']}")
                channel['is_active'] = False
            else:
                logger.error(f"‚ùå Error processing requests for {channel['channel_title']}: {e}")
        except Exception as e:
            logger.error(f"‚ùå Unexpected error for {channel['channel_title']}: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list", list_channels))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("turbo", turbo_approve))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.FORWARDED, handle_forwarded_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_actions))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        process_join_requests,
        'interval',
        seconds=20,
        args=[application]
    )
    scheduler.start()
    
    logger.info("üöÄ Bot starting...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ Railway –ª–∏ –º—ã
    if 'RAILWAY_STATIC_URL' in os.environ or 'PORT' in os.environ:
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
        webhook_url = os.environ.get('RAILWAY_STATIC_URL', '')
        if webhook_url:
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=BOT_TOKEN,
                webhook_url=f"{webhook_url}/{BOT_TOKEN}"
            )
        else:
            logger.info("üöÄ Starting bot in POLLING mode...")
            application.run_polling()
    else:
        logger.info("üöÄ Starting bot in POLLING mode...")
        application.run_polling()

if __name__ == '__main__':
    main()
