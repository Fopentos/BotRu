import os
import logging
import asyncio
import re
from telegram import Update, Bot, ChatMemberAdministrator, Chat
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.error import TelegramError, BadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found in environment variables!")
    exit(1)

# –ü—Ä–æ—Å—Ç–∞—è in-memory –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class SimpleDB:
    def __init__(self):
        self.channels = {}
        self.admins = {}
        self.stats = {}
        self.processed_users = set()
    
    def add_channel(self, channel_id, channel_title, owner_id, chat_type, invite_link):
        self.channels[channel_id] = {
            'channel_title': channel_title,
            'owner_id': owner_id,
            'is_active': True,
            'auto_approve': True,
            'chat_type': chat_type,
            'invite_link': invite_link,
            'max_daily_approvals': 5000,
            'last_processed': None,
            'total_approved': 0
        }
        
        if channel_id not in self.admins:
            self.admins[channel_id] = set()
        self.admins[channel_id].add(owner_id)
    
    def get_user_channels(self, user_id):
        return [channel for channel_id, channel in self.channels.items() 
                if user_id in self.admins.get(channel_id, set())]
    
    def get_channel_by_invite(self, invite_link):
        for channel_id, channel in self.channels.items():
            if channel['invite_link'] == invite_link:
                return channel
        return None
    
    def get_channel_by_id(self, channel_id):
        return self.channels.get(channel_id)
    
    def mark_user_processed(self, channel_id, user_id):
        key = f"{channel_id}_{user_id}"
        self.processed_users.add(key)
    
    def is_user_processed(self, channel_id, user_id):
        key = f"{channel_id}_{user_id}"
        return key in self.processed_users
    
    def increment_approved(self, channel_id):
        if channel_id in self.channels:
            self.channels[channel_id]['total_approved'] += 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = SimpleDB()

def extract_invite_link(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    patterns = [
        r'https?://t\.me/\+[\w-]+',
        r'https?://telegram\.me/\+[\w-]+',
        r'@[\w-]+',
        r'\+[\w-]+'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, text)
        if matches:
            link = matches[0]
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–ª–Ω—É—é
            if link.startswith('+'):
                return f"https://t.me/{link}"
            elif link.startswith('@'):
                return f"https://t.me/{link[1:]}"
            return link
    
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ –ü–†–ò–í–ê–¢–ù–´–• Telegram-–∫–∞–Ω–∞–ª–∞—Ö\n\n"
        "üîó **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:**\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –±–æ—Ç—É\n\n"
        "‚ö° **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è (3000+ –∑–∞—è–≤–æ–∫)**\n"
        "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É\n\n"
        "üìã **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/list - –ú–æ–∏ –∫–∞–Ω–∞–ª—ã\n"
        "/turbo - –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å –í–°–ï –∑–∞—è–≤–∫–∏\n"
        "/status - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å\n\n"
        "üîß **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!**"
    )

async def handle_invite_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    user_id = str(update.effective_user.id)
    text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    invite_link = extract_invite_link(text)
    
    if not invite_link:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "üìã **–ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:**\n"
            "‚Ä¢ https://t.me/+QDql_IQd_7Y0NTQy\n"
            "‚Ä¢ @username_–∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ +QDql_IQd_7Y0NTQy\n\n"
            "üîó **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É:**\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'\n"
            "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É"
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞
        bot = context.bot
        chat = await bot.get_chat(invite_link)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–Ω–∞–ª–æ–º
        if chat.type != Chat.CHANNEL:
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Telegram-–∫–∞–Ω–∞–ª–∞–º–∏.\n"
                "–î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        bot_member = await chat.get_member(bot.id)
        
        if not isinstance(bot_member, ChatMemberAdministrator):
            await update.message.reply_text(
                "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!\n\n"
                "üìã **–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞:**\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "4. –î–∞–π—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã):\n"
                "   ‚úì –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                "   ‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "   ‚úì –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–†–ò–¢–ò–ß–ï–°–ö–ò –≤–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        missing_permissions = []
        
        if not bot_member.can_invite_users:
            missing_permissions.append("‚ùå –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        if not bot_member.can_promote_members:
            missing_permissions.append("‚ùå –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        if not bot_member.can_restrict_members:
            missing_permissions.append("‚ùå –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        if missing_permissions:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫!\n\n"
                "–ë–æ—Ç—É –Ω—É–∂–Ω—ã –í–°–ï —ç—Ç–∏ –ø—Ä–∞–≤–∞:\n" +
                "\n".join(missing_permissions) +
                "\n\nüîß **–û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞**"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
        existing_channel = db.get_channel_by_id(str(chat.id))
        if existing_channel:
            await update.message.reply_text(
                f"‚úÖ –ö–∞–Ω–∞–ª '{chat.title}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üöÄ –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"/turbo\n"
                f"üìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:\n"
                f"/status"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        try:
            if bot_member.can_invite_users:
                new_invite = await bot.create_chat_invite_link(chat.id, creates_join_request=True)
                final_invite_link = new_invite.invite_link
            else:
                final_invite_link = invite_link
        except:
            final_invite_link = invite_link
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_channel(str(chat.id), chat.title, user_id, chat.type, final_invite_link)
        
        success_message = (
            f"‚úÖ **–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat.title}\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** {final_invite_link}\n"
            f"üìä **–°—Ç–∞—Ç—É—Å:** üü¢ –ê–ö–¢–ò–í–ï–ù\n"
            f"ü§ñ **–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ:** üü¢ –í–ö–õ–Æ–ß–ï–ù–û\n"
            f"‚ö° **–°–∫–æ—Ä–æ—Å—Ç—å:** 10 –∑–∞—è–≤–æ–∫/—Å–µ–∫—É–Ω–¥—É\n\n"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            join_requests = await bot.get_chat_join_requests(chat.id)
            pending_count = len(list(join_requests))
            success_message += f"‚è≥ **–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:** {pending_count}\n\n"
        except:
            pending_count = 0
        
        success_message += (
            "üöÄ **–î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫:**\n"
            "/turbo\n\n"
            "üìà **–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:**\n"
            "/status"
        )
        
        await update.message.reply_text(success_message)
        
    except BadRequest as e:
        error_msg = str(e).lower()
        if "chat not found" in error_msg:
            await update.message.reply_text(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                "üîß **–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:**\n"
                "1. –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞\n"
                "4. –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
            )
        elif "not enough rights" in error_msg:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –î–∞–π—Ç–µ –±–æ—Ç—É –í–°–ï –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        elif "invite link invalid" in error_msg:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n"
                "üîó **–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:**\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'\n"
                "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É"
            )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"Error adding channel: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "üîó **–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:**\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –±–æ—Ç—É"
        )
        return
    
    channels_text = "üìã **–í–∞—à–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n"
    for i, channel in enumerate(user_channels, 1):
        status = "üü¢" if channel['is_active'] else "üî¥"
        approved = channel.get('total_approved', 0)
        channels_text += f"{status} **{i}. {channel['channel_title']}**\n"
        channels_text += f"   üîó {channel['invite_link']}\n"
        channels_text += f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {approved} –∑–∞—è–≤–æ–∫\n\n"
    
    channels_text += "üöÄ **–î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è:** /turbo"
    await update.message.reply_text(channels_text)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
        )
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    if len(user_channels) > 1:
        channels_text = "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:**\n\n"
        for i, channel in enumerate(user_channels, 1):
            status = "üü¢" if channel['is_active'] else "üî¥"
            channels_text += f"{status} **{i}. {channel['channel_title']}**\n"
        
        channels_text += "\nüîó **–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞**"
        await update.message.reply_text(channels_text)
        return
    
    # –ï—Å–ª–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    channel = user_channels[0]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏
        join_requests = await context.bot.get_chat_join_requests(
            chat_id=channel['channel_id']
        )
        
        pending_count = len(list(join_requests))
        total_approved = channel.get('total_approved', 0)
        
        status_text = (
            f"üìä **–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞:** {channel['channel_title']}\n\n"
            f"‚è≥ **–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:** {pending_count}\n"
            f"‚úÖ **–í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ:** {total_approved}\n"
            f"üîÑ **–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if channel['is_active'] else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"‚ö° **–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ:** {'üü¢ –í–ö–õ' if channel['auto_approve'] else 'üî¥ –í–´–ö–õ'}\n\n"
        )
        
        if pending_count > 0:
            estimated_time = pending_count / 10  # 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
            if estimated_time > 60:
                status_text += f"‚è± **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {estimated_time/60:.1f} –º–∏–Ω—É—Ç\n"
            else:
                status_text += f"‚è± **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {estimated_time:.1f} —Å–µ–∫—É–Ω–¥\n"
            
            status_text += f"üöÄ **–î–ª—è –∑–∞–ø—É—Å–∫–∞:** /turbo"
        else:
            status_text += "üéâ **–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫!**"
        
        await update.message.reply_text(status_text)
        
    except Exception as e:
        logger.error(f"Error getting status: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def turbo_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–£–†–ë–û-—Ä–µ–∂–∏–º –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫"""
    user_id = str(update.effective_user.id)
    
    user_channels = db.get_user_channels(user_id)
    
    if not user_channels:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
        )
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π
    if len(user_channels) > 1:
        await update.message.reply_text(
            "üîó **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤.**\n\n"
            "üöÄ –ó–∞–ø—É—Å–∫–∞—é TURBO-—Ä–µ–∂–∏–º –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:\n"
            f"**{user_channels[0]['channel_title']}**\n\n"
            "üìã –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list"
        )
    
    channel = user_channels[0]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        join_requests = await context.bot.get_chat_join_requests(
            chat_id=channel['channel_id']
        )
        
        requests_list = list(join_requests)
        total = len(requests_list)
        
        if total == 0:
            await update.message.reply_text("üéâ **–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è!**")
            return
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
        estimated_time = total / 10  # 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
        time_display = f"{estimated_time/60:.1f} –º–∏–Ω—É—Ç" if estimated_time > 60 else f"{estimated_time:.0f} —Å–µ–∫—É–Ω–¥"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º
        message = await update.message.reply_text(
            f"üöÄ **–ó–ê–ü–£–°–ö TURBO-–†–ï–ñ–ò–ú–ê**\n\n"
            f"üìù **–ö–∞–Ω–∞–ª:** {channel['channel_title']}\n"
            f"üìä **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫:** {total}\n"
            f"‚ö° **–°–∫–æ—Ä–æ—Å—Ç—å:** 10 –∑–∞—è–≤–æ–∫/—Å–µ–∫—É–Ω–¥—É\n"
            f"‚è± **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** {time_display}\n"
            f"üîß **–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...**"
        )
        
        approved = 0
        failed = 0
        start_time = time.time()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ - 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
        requests_per_second = 10
        batch_delay = 1.0 / requests_per_second  # 0.1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏
        
        for i, request in enumerate(requests_list):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if db.is_user_processed(channel['channel_id'], request.user.id):
                continue
                
            success = await approve_single_request(
                context, 
                channel['channel_id'], 
                request.user.id,
                channel['channel_title']
            )
            
            if success:
                approved += 1
                db.mark_user_processed(channel['channel_id'], request.user.id)
            else:
                failed += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞—è–≤–æ–∫
            if i % 100 == 0 or i == total - 1:
                elapsed = time.time() - start_time
                current_speed = approved / elapsed if elapsed > 0 else 0
                remaining = total - i - 1
                eta = remaining / requests_per_second if current_speed > 0 else 0
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ETA
                if eta > 60:
                    eta_display = f"{eta/60:.1f} –º–∏–Ω"
                else:
                    eta_display = f"{eta:.0f} —Å–µ–∫"
                
                progress = (
                    f"üöÄ **TURBO-–†–ï–ñ–ò–ú**\n\n"
                    f"üìù **–ö–∞–Ω–∞–ª:** {channel['channel_title']}\n"
                    f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {i+1}/{total}\n"
                    f"‚úÖ **–ü—Ä–∏–Ω—è—Ç–æ:** {approved}\n"
                    f"‚ùå **–û—à–∏–±–æ–∫:** {failed}\n"
                    f"‚ö° **–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:** {current_speed:.1f}/—Å–µ–∫\n"
                    f"‚è± **–û—Å—Ç–∞–ª–æ—Å—å:** ~{eta_display}"
                )
                try:
                    await message.edit_text(progress)
                except:
                    pass
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É)
            if i < total - 1:
                await asyncio.sleep(batch_delay)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        actual_speed = approved / total_time if total_time > 0 else 0
        
        result_message = (
            f"üéâ **TURBO-–†–ï–ñ–ò–ú –ó–ê–í–ï–†–®–ï–ù!**\n\n"
            f"üìù **–ö–∞–Ω–∞–ª:** {channel['channel_title']}\n"
            f"üìä **–ò–¢–û–ì–ò:**\n"
            f"‚úÖ **–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ:** {approved}/{total}\n"
            f"‚ùå **–û—à–∏–±–æ–∫:** {failed}\n"
            f"‚è± **–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:** {total_time:.1f} —Å–µ–∫\n"
            f"‚ö° **–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:** {actual_speed:.1f} –∑–∞—è–≤–æ–∫/—Å–µ–∫\n\n"
        )
        
        if approved == total:
            result_message += "üéØ **–í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!**"
        else:
            result_message += "‚ö†Ô∏è **–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å**"
        
        await message.edit_text(result_message)
        
    except Exception as e:
        logger.error(f"Error in turbo mode: {e}")
        await update.message.reply_text(f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:** {str(e)}")

async def approve_single_request(context, channel_id, user_id, channel_title):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await context.bot.approve_chat_join_request(
            chat_id=channel_id,
            user_id=user_id
        )
        db.increment_approved(channel_id)
        logger.info(f"‚úÖ Approved user {user_id} for {channel_title}")
        return True
        
    except TelegramError as e:
        error_msg = str(e).lower()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–ª –∑–∞—è–≤–∫—É
        if "user not found" in error_msg or "user already participant" in error_msg:
            logger.info(f"‚ö†Ô∏è User {user_id} already approved or not found for {channel_title}")
            return True  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, —Ç.–∫. –∑–∞—è–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç
            
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –∑–∞–º–µ–¥–ª—è–µ–º—Å—è
        elif "too many requests" in error_msg:
            logger.warning(f"‚ö†Ô∏è Rate limit hit for {channel_title}, slowing down...")
            await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
            return False
            
        # –ù–µ—Ç –ø—Ä–∞–≤ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
        elif "not enough rights" in error_msg:
            logger.error(f"‚ùå Not enough rights in {channel_title}. Deactivating.")
            channel = db.get_channel_by_id(channel_id)
            if channel:
                channel['is_active'] = False
            return False
            
        else:
            logger.error(f"‚ùå Error approving user {user_id} for {channel_title}: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Unexpected error approving user {user_id}: {e}")
        return False

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **Auto-Join Bot –¥–ª—è –ü–†–ò–í–ê–¢–ù–´–• –ö–ê–ù–ê–õ–û–í**

‚ö° **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è 3000+ –∑–∞—è–≤–æ–∫**

**üîó –ö–ê–ö –ù–ê–ß–ê–¢–¨:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –î–∞–π—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞

**üìã –ö–û–ú–ê–ù–î–´:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/list - –ú–æ–∏ –∫–∞–Ω–∞–ª—ã  
/turbo - –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å –í–°–ï –∑–∞—è–≤–∫–∏
/status - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üîß –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ê–í –ë–û–¢–ê:**
–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞ –¥–∞–π—Ç–µ –±–æ—Ç—É –í–°–ï –ø—Ä–∞–≤–∞:
‚úì –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
‚úì –û–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏
‚úì –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

**‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:**
- –î–æ 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
- 3200 –∑–∞—è–≤–æ–∫ = ~5.5 –º–∏–Ω—É—Ç
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
- –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram

**üìä –ü–†–ò–ú–ï–† –î–õ–Ø 3200 –ó–ê–Ø–í–û–ö:**
‚è± –í—Ä–µ–º—è: ~5.5 –º–∏–Ω—É—Ç
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 10/—Å–µ–∫
‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: 3200 –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫

**üöÄ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:**
1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
2. /turbo
3. –ñ–¥–µ–º 5-6 –º–∏–Ω—É—Ç
4. –ì–æ—Ç–æ–≤–æ!
    """
    await update.message.reply_text(help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_channels))
    application.add_handler(CommandHandler("turbo", turbo_approve))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_invite_link))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        process_join_requests,
        'interval',
        seconds=20,
        args=[application]
    )
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ Railway –ª–∏ –º—ã
    if 'RAILWAY_STATIC_URL' in os.environ or 'PORT' in os.environ:
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
        webhook_url = os.environ.get('RAILWAY_STATIC_URL', '')
        if webhook_url:
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=BOT_TOKEN,
                webhook_url=f"{webhook_url}/{BOT_TOKEN}"
            )
        else:
            logger.info("üöÄ Starting bot in POLLING mode...")
            application.run_polling()
    else:
        logger.info("üöÄ Starting bot in POLLING mode...")
        application.run_polling()

async def process_join_requests(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
    for channel_id, channel in db.channels.items():
        if not channel['is_active'] or not channel['auto_approve']:
            continue
            
        try:
            join_requests = await context.bot.get_chat_join_requests(chat_id=channel_id)
            requests_list = list(join_requests)
            
            if not requests_list:
                continue
            
            logger.info(f"Processing {len(requests_list)} new requests for {channel['channel_title']}")
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ - 10 –∑–∞—è–≤–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
            requests_per_second = 10
            batch_delay = 1.0 / requests_per_second
            
            processed = 0
            for request in requests_list:
                if db.is_user_processed(channel_id, request.user.id):
                    continue
                    
                success = await approve_single_request(
                    context, 
                    channel_id, 
                    request.user.id,
                    channel['channel_title']
                )
                
                if success:
                    processed += 1
                    db.mark_user_processed(channel_id, request.user.id)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                await asyncio.sleep(batch_delay)
            
            if processed > 0:
                logger.info(f"‚úÖ Approved {processed} new requests for {channel['channel_title']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            channel['last_processed'] = datetime.now()
            
        except TelegramError as e:
            error_msg = str(e).lower()
            if "chat not found" in error_msg or "bot was kicked" in error_msg:
                logger.warning(f"Bot was removed from {channel['channel_title']}")
                channel['is_active'] = False
            elif "not enough rights" in error_msg:
                logger.warning(f"Not enough rights in {channel['channel_title']}")
                channel['is_active'] = False
            else:
                logger.error(f"Error processing requests for {channel['channel_title']}: {e}")
        except Exception as e:
            logger.error(f"Unexpected error for {channel['channel_title']}: {e}")

if __name__ == '__main__':
    main()
