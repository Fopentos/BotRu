import os
import logging
from telegram import Update, Bot, ChatMemberAdministrator
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from telegram.error import TelegramError, BadRequest
from sqlalchemy import create_engine, Column, Integer, String, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()

class ChannelSettings(Base):
    __tablename__ = 'channel_settings'
    
    id = Column(Integer, primary_key=True)
    channel_id = Column(String, unique=True)
    channel_username = Column(String)
    owner_id = Column(String)
    is_active = Column(Boolean, default=True)
    auto_approve = Column(Boolean, default=True)
    max_daily_approvals = Column(Integer, default=1000)

class Admin(Base):
    __tablename__ = 'admins'
    
    id = Column(Integer, primary_key=True)
    channel_id = Column(String)
    admin_id = Column(String)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('sqlite:///bot_data.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8295619077:AAH05zqWTC8Kv11dLJyaMlSWlXEJtmU_Too')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –ü–æ–º–æ—â—å"
    )

async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "–ü—Ä–∏–º–µ—Ä: /add_channel @my_channel"
        )
        return
    
    channel_username = context.args[0].lstrip('@')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞
        bot = context.bot
        chat = await bot.get_chat(f"@{channel_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        bot_member = await chat.get_member(bot.id)
        
        if not isinstance(bot_member, ChatMemberAdministrator):
            await update.message.reply_text(
                "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º:\n"
                "‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚úì –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
        if not (bot_member.can_invite_users and bot_member.can_promote_members):
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\n"
                "–ë–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞:\n"
                "‚úì –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚úì –î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        session = Session()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
            existing_channel = session.query(ChannelSettings).filter_by(
                channel_id=str(chat.id)
            ).first()
            
            if existing_channel:
                await update.message.reply_text("‚úÖ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            new_channel = ChannelSettings(
                channel_id=str(chat.id),
                channel_username=channel_username,
                owner_id=user_id,
                is_active=True,
                auto_approve=True,
                max_daily_approvals=1000
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            new_admin = Admin(
                channel_id=str(chat.id),
                admin_id=user_id
            )
            
            session.add(new_channel)
            session.add(new_admin)
            session.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                "‚ö° –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏\n"
                "‚öô –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            )
            
        finally:
            session.close()
            
    except BadRequest as e:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞"
        )
    except Exception as e:
        logger.error(f"Error adding channel: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    user_id = str(update.effective_user.id)
    
    session = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = session.query(ChannelSettings).join(
            Admin, ChannelSettings.channel_id == Admin.channel_id
        ).filter(Admin.admin_id == user_id).all()
        
        if not user_channels:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
            )
            return
        
        if context.args:
            # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_username = context.args[0].lstrip('@')
            channel = session.query(ChannelSettings).filter_by(
                channel_username=channel_username
            ).first()
            
            if channel and any(admin.admin_id == user_id for admin in channel.admins):
                settings_text = (
                    f"‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ @{channel.channel_username}\n\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {'üü¢ –í–ö–õ' if channel.is_active else 'üî¥ –í–´–ö–õ'}\n"
                    f"ü§ñ –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ: {'üü¢ –í–ö–õ' if channel.auto_approve else 'üî¥ –í–´–ö–õ'}\n"
                    f"üìà –õ–∏–º–∏—Ç –ø—Ä–∏–Ω—è—Ç–∏–π/–¥–µ–Ω—å: {channel.max_daily_approvals}\n\n"
                    "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
                    "/enable @channel - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
                    "/disable @channel - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
                    "/set_limit @channel —á–∏—Å–ª–æ - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç\n"
                    "/toggle_auto @channel - –í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ-–ø—Ä–∏–Ω—è—Ç–∏–µ"
                )
                await update.message.reply_text(settings_text)
            else:
                await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            channels_text = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
            for channel in user_channels:
                status = "üü¢" if channel.is_active else "üî¥"
                channels_text += f"{status} @{channel.channel_username}\n"
            
            channels_text += "\nüìù –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: /settings @username"
            await update.message.reply_text(channels_text)
            
    finally:
        session.close()

async def enable_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    await toggle_channel(update, context, True)

async def disable_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    await toggle_channel(update, context, False)

async def toggle_channel(update: Update, context: ContextTypes.DEFAULT_TYPE, enable: bool):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞")
        return
    
    channel_username = context.args[0].lstrip('@')
    
    session = Session()
    try:
        channel = session.query(ChannelSettings).filter_by(
            channel_username=channel_username
        ).first()
        
        if not channel or not any(admin.admin_id == user_id for admin in channel.admins):
            await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        channel.is_active = enable
        session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω" if enable else "–≤—ã–∫–ª—é—á–µ–Ω"
        await update.message.reply_text(f"‚úÖ –ë–æ—Ç –¥–ª—è @{channel_username} {status}")
        
    finally:
        session.close()

async def process_join_requests(context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
    session = Session()
    try:
        active_channels = session.query(ChannelSettings).filter_by(
            is_active=True,
            auto_approve=True
        ).all()
        
        for channel in active_channels:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                join_requests = await context.bot.get_chat_join_requests(
                    chat_id=channel.channel_id
                )
                
                approved_count = 0
                for request in join_requests:
                    try:
                        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É
                        await context.bot.approve_chat_join_request(
                            chat_id=channel.channel_id,
                            user_id=request.user.id
                        )
                        approved_count += 1
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 –ø—Ä–∏–Ω—è—Ç–∏–π
                        if approved_count % 100 == 0:
                            logger.info(f"Approved {approved_count} requests for {channel.channel_username}")
                            
                    except TelegramError as e:
                        logger.error(f"Error approving user {request.user.id}: {e}")
                        continue
                
                if approved_count > 0:
                    logger.info(f"Approved {approved_count} requests for {channel.channel_username}")
                    
            except TelegramError as e:
                logger.error(f"Error processing join requests for {channel.channel_username}: {e}")
                continue
                
    finally:
        session.close()

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    user_id = str(update.effective_user.id)
    
    session = Session()
    try:
        user_channels = session.query(ChannelSettings).join(
            Admin, ChannelSettings.channel_id == Admin.channel_id
        ).filter(Admin.admin_id == user_id).all()
        
        if not user_channels:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        
        for channel in user_channels:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await context.bot.get_chat(channel.channel_id)
                members_count = await chat.get_member_count()
                
                stats_text += (
                    f"üîπ @{channel.channel_username}\n"
                    f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}\n"
                    f"   ü§ñ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if channel.is_active else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
                    f"   ‚ö° –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ: {'üü¢ –í–ö–õ' if channel.auto_approve else 'üî¥ –í–´–ö–õ'}\n\n"
                )
            except:
                stats_text += f"üîπ @{channel.channel_username} - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        await update.message.reply_text(stats_text)
        
    finally:
        session.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **Auto-Join Bot - –ü–æ–º–æ—â—å**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add_channel @username - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:**
/enable @channel - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
/disable @channel - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
/set_limit @channel —á–∏—Å–ª–æ - –õ–∏–º–∏—Ç –ø—Ä–∏–Ω—è—Ç–∏–π
/toggle_auto @channel - –í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ-–ø—Ä–∏–Ω—è—Ç–∏–µ

**–í–∞–∂–Ω–æ:**
1. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
2. –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞: "–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
3. –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @your_support
    """
    await update.message.reply_text(help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("settings", settings))
    application.add_handler(CommandHandler("enable", enable_channel))
    application.add_handler(CommandHandler("disable", disable_channel))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        process_join_requests,
        'interval',
        seconds=30,
        args=[application]
    )
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    webhook_url = os.environ.get('RAILWAY_STATIC_URL')
    
    if webhook_url:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –Ω–∞ Railway
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=f"{webhook_url}/{BOT_TOKEN}"
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        application.run_polling()

if __name__ == '__main__':
    main()