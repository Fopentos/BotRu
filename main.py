import os
import logging
import asyncio
import asyncpg
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl import functions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
user_data = {}

# PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
DATABASE_URL = os.environ.get('DATABASE_URL')

async def create_pool():
    return await asyncpg.create_pool(DATABASE_URL)

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL —Ç–∞–±–ª–∏—Ü"""
    try:
        pool = await create_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    phone TEXT,
                    api_id INTEGER,
                    api_hash TEXT,
                    session_string TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS auth_sessions (
                    user_id BIGINT PRIMARY KEY,
                    phone TEXT,
                    phone_code_hash TEXT,
                    client_data TEXT,
                    state TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS user_stats (
                    user_id BIGINT PRIMARY KEY,
                    scans_count INTEGER DEFAULT 0,
                    adds_count INTEGER DEFAULT 0,
                    total_added INTEGER DEFAULT 0,
                    last_scan TIMESTAMP,
                    last_add TIMESTAMP
                )
            ''')
        await pool.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

class MassAuthSystem:
    def __init__(self):
        self.temp_clients = {}
        
    async def start_auth(self, user_id, phone_number):
        """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            client = TelegramClient(
                StringSession(), 
                api_id=2040,
                api_hash='b18441a1ff607e10a989891a5462e627'
            )
            
            await client.connect()
            sent_code = await client.send_code_request(phone_number)
            
            await self.save_auth_session(
                user_id, 
                phone_number, 
                sent_code.phone_code_hash,
                client.session.save(),
                'waiting_code'
            )
            
            self.temp_clients[user_id] = client
            
            return {
                'success': True, 
                'message': f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone_number}",
                'phone_code_hash': sent_code.phone_code_hash
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
            return {'success': False, 'message': f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}
    
    async def verify_code(self, user_id, code):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏"""
        try:
            auth_data = await self.get_auth_session(user_id)
            if not auth_data:
                return {'success': False, 'message': '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            client = TelegramClient(
                StringSession(auth_data['client_data']),
                api_id=2040,
                api_hash='b18441a1ff607e10a989891a5462e627'
            )
            
            await client.connect()
            await client.sign_in(
                phone=auth_data['phone'],
                code=code,
                phone_code_hash=auth_data['phone_code_hash']
            )
            
            app = await client(functions.account.CreateAppRequest(
                app_id=2040,
                app_hash='b18441a1ff607e10a989891a5462e627',
                app_title=f"MassAdder_User_{user_id}",
                app_shortname=f"user_{user_id}",
                app_url="",
                platform="desktop",
                description="Auto-generated by Zeta Mass Adder Bot"
            ))
            
            await self.save_user_api(
                user_id, 
                auth_data['phone'],
                app.api_id, 
                app.api_hash,
                client.session.save()
            )
            
            await self.cleanup_auth_session(user_id)
            if user_id in self.temp_clients:
                await self.temp_clients[user_id].disconnect()
                del self.temp_clients[user_id]
            
            await client.disconnect()
            
            return {
                'success': True,
                'api_id': app.api_id,
                'api_hash': app.api_hash,
                'message': 'üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! API –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã.'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return {'success': False, 'message': f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'}

    async def save_auth_session(self, user_id, phone, phone_code_hash, client_data, state):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            pool = await create_pool()
            async with pool.acquire() as conn:
                await conn.execute('''
                    INSERT INTO auth_sessions 
                    (user_id, phone, phone_code_hash, client_data, state) 
                    VALUES ($1, $2, $3, $4, $5)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET 
                        phone = $2,
                        phone_code_hash = $3,
                        client_data = $4,
                        state = $5,
                        created_at = CURRENT_TIMESTAMP
                ''', user_id, phone, phone_code_hash, client_data, state)
            await pool.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")

    async def get_auth_session(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            pool = await create_pool()
            async with pool.acquire() as conn:
                row = await conn.fetchrow('SELECT * FROM auth_sessions WHERE user_id = $1', user_id)
            await pool.close()
            
            if row:
                return {
                    'user_id': row['user_id'],
                    'phone': row['phone'],
                    'phone_code_hash': row['phone_code_hash'],
                    'client_data': row['client_data'],
                    'state': row['state']
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None

    async def cleanup_auth_session(self, user_id):
        """–û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            pool = await create_pool()
            async with pool.acquire() as conn:
                await conn.execute('DELETE FROM auth_sessions WHERE user_id = $1', user_id)
            await pool.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")

    async def save_user_api(self, user_id, phone, api_id, api_hash, session_string):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            pool = await create_pool()
            async with pool.acquire() as conn:
                await conn.execute('''
                    INSERT INTO users 
                    (user_id, phone, api_id, api_hash, session_string, last_activity) 
                    VALUES ($1, $2, $3, $4, $5, $6)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET 
                        phone = $2,
                        api_id = $3,
                        api_hash = $4,
                        session_string = $5,
                        last_activity = $6
                ''', user_id, phone, api_id, api_hash, session_string, datetime.now())
            await pool.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API: {e}")

mass_auth = MassAuthSystem()

async def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        pool = await create_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow('SELECT * FROM users WHERE user_id = $1', user_id)
        await pool.close()
        
        if row:
            return {
                'user_id': row['user_id'],
                'phone': row['phone'],
                'api_id': row['api_id'],
                'api_hash': row['api_hash'],
                'session_string': row['session_string'],
                'is_active': row['is_active']
            }
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        pool = await create_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow('SELECT * FROM user_stats WHERE user_id = $1', user_id)
        await pool.close()
        
        if row:
            return {
                'scans_count': row['scans_count'],
                'adds_count': row['adds_count'],
                'total_added': row['total_added']
            }
        return {'scans_count': 0, 'adds_count': 0, 'total_added': 0}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'scans_count': 0, 'adds_count': 0, 'total_added': 0}

async def update_user_stats(user_id, field):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        pool = await create_pool()
        async with pool.acquire() as conn:
            if field == 'scans_count':
                await conn.execute('''
                    INSERT INTO user_stats (user_id, scans_count, last_scan)
                    VALUES ($1, 1, $2)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET 
                        scans_count = user_stats.scans_count + 1,
                        last_scan = $2
                ''', user_id, datetime.now())
            elif field == 'adds_count':
                await conn.execute('''
                    INSERT INTO user_stats (user_id, adds_count, last_add)
                    VALUES ($1, 1, $2)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET 
                        adds_count = user_stats.adds_count + 1,
                        last_add = $2
                ''', user_id, datetime.now())
        await pool.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è python-telegram-bot
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_data_obj = await get_user_data(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üîê –ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="quick_auth")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="manual_guide")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/zeta_support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if user_data_obj and user_data_obj.get('api_id'):
        stats = await get_user_stats(user_id)
        await update.message.reply_text(
            f"ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: `{user_data_obj['phone']}`\n"
            f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: `{stats.get('scans_count', 0)}`\n"
            f"üë• –î–æ–±–∞–≤–ª–µ–Ω–æ: `{stats.get('total_added', 0)}`\n\n"
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zeta Mass Adder!**\n\n"
            "ü§ñ *–£–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞ Telegram-—Å–æ–æ–±—â–µ—Å—Ç–≤*\n\n"
            "üéØ **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
            "1. üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "2. üîç –í—ã–±–µ—Ä–∏ —á–∞—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "3. üöÄ –î–æ–±–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n\n"
            "‚ö° **–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–∏ API –∫–ª—é—á–∏!**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        if query.data == "quick_auth":
            await query.edit_message_text(
                "üîê **–ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "üì± –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `+79123456789`\n\n"
                "‚ö†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*",
                parse_mode='Markdown'
            )
            user_states[user_id] = 'waiting_phone'
        
        elif query.data == "manual_guide":
            await query.edit_message_text(
                "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
                "1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:** –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π\n"
                "2. **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:** –£–∫–∞–∂–∏ —á–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "3. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:** –í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n\n"
                "‚ö° –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!",
                parse_mode='Markdown'
            )
        
        elif query.data == "scan_chat":
            await query.edit_message_text(
                "üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞**\n\n"
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
                "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
                parse_mode='Markdown'
            )
        
        elif query.data == "add_users":
            await query.edit_message_text(
                "üöÄ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
                "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã!",
                parse_mode='Markdown'
            )
        
        elif query.data == "stats":
            user_id = query.from_user.id
            stats = await get_user_stats(user_id)
            await query.edit_message_text(
                f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: **{stats['scans_count']}**\n"
                f"üöÄ –û–ø–µ—Ä–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: **{stats['adds_count']}**\n"
                f"üë• –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: **{stats['total_added']}**\n\n"
                f"‚ö° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                parse_mode='Markdown'
            )
        
        elif query.data == "main_menu":
            user_data_obj = await get_user_data(user_id)
            if user_data_obj and user_data_obj.get('api_id'):
                stats = await get_user_stats(user_id)
                keyboard = [
                    [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", callback_data="scan_chat"),
                     InlineKeyboardButton("üöÄ –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_users")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                     InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                    [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help"),
                     InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="reauth")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
                    f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: `{user_data_obj['phone']}`\n"
                    f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: `{stats.get('scans_count', 0)}`\n"
                    f"üë• –î–æ–±–∞–≤–ª–µ–Ω–æ: `{stats.get('total_added', 0)}`\n\n"
                    f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üîê –ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="quick_auth")],
                    [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="manual_guide")],
                    [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/zeta_support")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zeta Mass Adder!**\n\n"
                    "ü§ñ *–£–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞ Telegram-—Å–æ–æ–±—â–µ—Å—Ç–≤*\n\n"
                    "üéØ **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
                    "1. üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                    "2. üîç –í—ã–±–µ—Ä–∏ —á–∞—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                    "3. üöÄ –î–æ–±–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n\n"
                    "‚ö° **–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–∏ API –∫–ª—é—á–∏!**",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        
        elif query.data == "settings":
            await query.edit_message_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
                "üîß *–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n"
                "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
                "‚Ä¢ –õ–∏–º–∏—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –õ–∏–º–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                parse_mode='Markdown'
            )
        
        elif query.data == "help":
            await query.edit_message_text(
                "üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Zeta Mass Adder**\n\n"
                "üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:**\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –±—ã—Å—Ç—Ä—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–∏ API –∫–ª—é—á–∏\n"
                "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ\n\n"
                "üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤:**\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
                "‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π –ª–∏–º–∏—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
                "üöÄ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É\n"
                "‚Ä¢ –ë–æ—Ç –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏\n\n"
                "üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n"
                "@zeta_support - –ø–æ–º–æ—â—å –∏ –≤–æ–ø—Ä–æ—Å—ã",
                parse_mode='Markdown'
            )
        
        elif query.data == "reauth":
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            pool = await create_pool()
            async with pool.acquire() as conn:
                await conn.execute('DELETE FROM users WHERE user_id = $1', user_id)
                await conn.execute('DELETE FROM auth_sessions WHERE user_id = $1', user_id)
                await conn.execute('DELETE FROM user_stats WHERE user_id = $1', user_id)
            await pool.close()
            
            user_states.pop(user_id, None)
            user_data.pop(user_id, None)
            
            await query.edit_message_text(
                "üîÑ **–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!**\n\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start\n\n"
                "‚ö° *–ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏*",
                parse_mode='Markdown'
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown'
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    state = user_states.get(user_id)
    text = update.message.text
    
    if not state:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
        
    if state == 'waiting_phone':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
        if not text.startswith('+') or len(text) < 10:
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!**\n\n"
                "üì± **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:** `+79123456789`\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                parse_mode='Markdown'
            )
            return
            
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        result = await mass_auth.start_auth(user_id, text)
        
        if result['success']:
            user_states[user_id] = 'waiting_code'
            await update.message.reply_text(
                f"‚úÖ {result['message']}\n\n"
                f"üì≤ *Telegram –ø—Ä–∏—Å–ª–∞–ª –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n"
                f"üî¢ –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `12345`",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(result['message'])
            user_states.pop(user_id, None)
            
    elif state == 'waiting_code':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
        if not text.isdigit() or len(text) != 5:
            await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5 —Ü–∏—Ñ—Ä! –ü—Ä–∏–º–µ—Ä: `12345`", parse_mode='Markdown')
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
        result = await mass_auth.verify_code(user_id, text)
        
        if result['success']:
            keyboard = [
                [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", callback_data="scan_chat")],
                [InlineKeyboardButton("üöÄ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="add_users")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üéâ **{result['message']}**\n\n"
                f"üîë **–¢–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏:**\n"
                f"‚Ä¢ API_ID: `{result['api_id']}`\n"
                f"‚Ä¢ API_HASH: `{result['api_hash']}`\n\n"
                f"‚ö° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(result['message'])
            
        user_states.pop(user_id, None)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zeta Mass Adder Bot...")
    db_success = await init_database()
    
    if not db_success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –ø–æ—Ä—è–¥–∫–µ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    try:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        me = await application.bot.get_me()
        print(f"‚úÖ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("‚ö° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)  # –°–ø–∏–º 1 —á–∞—Å
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if application.updater:
            await application.updater.stop()
        await application.stop()
        await application.shutdown()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é main —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
