import os
import logging
import asyncio
import asyncpg
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl import functions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
user_data = {}

# PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
DATABASE_URL = os.environ.get('DATABASE_URL')

async def create_pool():
    return await asyncpg.create_pool(DATABASE_URL)

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL —Ç–∞–±–ª–∏—Ü"""
    pool = await create_pool()
    async with pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                phone TEXT,
                api_id INTEGER,
                api_hash TEXT,
                session_string TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS auth_sessions (
                user_id BIGINT PRIMARY KEY,
                phone TEXT,
                phone_code_hash TEXT,
                client_data TEXT,
                state TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS user_stats (
                user_id BIGINT PRIMARY KEY,
                scans_count INTEGER DEFAULT 0,
                adds_count INTEGER DEFAULT 0,
                total_added INTEGER DEFAULT 0,
                last_scan TIMESTAMP,
                last_add TIMESTAMP
            )
        ''')
    await pool.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

class MassAuthSystem:
    def __init__(self):
        self.temp_clients = {}
        
    async def start_auth(self, user_id, phone_number):
        """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–µ –∫–ª—é—á–∏ Telethon –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            client = TelegramClient(
                StringSession(), 
                api_id=2040,
                api_hash='b18441a1ff607e10a989891a5462e627'
            )
            
            await client.connect()
            sent_code = await client.send_code_request(phone_number)
            
            await self.save_auth_session(
                user_id, 
                phone_number, 
                sent_code.phone_code_hash,
                client.session.save(),
                'waiting_code'
            )
            
            self.temp_clients[user_id] = client
            
            return {
                'success': True, 
                'message': f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone_number}",
                'phone_code_hash': sent_code.phone_code_hash
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
            return {'success': False, 'message': f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}
    
    async def verify_code(self, user_id, code):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏"""
        try:
            auth_data = await self.get_auth_session(user_id)
            if not auth_data:
                return {'success': False, 'message': '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            client = TelegramClient(
                StringSession(auth_data['client_data']),
                api_id=2040,
                api_hash='b18441a1ff607e10a989891a5462e627'
            )
            
            await client.connect()
            await client.sign_in(
                phone=auth_data['phone'],
                code=code,
                phone_code_hash=auth_data['phone_code_hash']
            )
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            app = await client(functions.account.CreateAppRequest(
                app_id=2040,
                app_hash='b18441a1ff607e10a989891a5462e627',
                app_title=f"MassAdder_User_{user_id}",
                app_shortname=f"user_{user_id}",
                app_url="",
                platform="desktop",
                description="Auto-generated by Zeta Mass Adder Bot"
            ))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.save_user_api(
                user_id, 
                auth_data['phone'],
                app.api_id, 
                app.api_hash,
                client.session.save()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.cleanup_auth_session(user_id)
            if user_id in self.temp_clients:
                await self.temp_clients[user_id].disconnect()
                del self.temp_clients[user_id]
            
            await client.disconnect()
            
            return {
                'success': True,
                'api_id': app.api_id,
                'api_hash': app.api_hash,
                'message': 'üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! API –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã.'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return {'success': False, 'message': f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'}

    async def save_auth_session(self, user_id, phone, phone_code_hash, client_data, state):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        pool = await create_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO auth_sessions 
                (user_id, phone, phone_code_hash, client_data, state) 
                VALUES ($1, $2, $3, $4, $5)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    phone = $2,
                    phone_code_hash = $3,
                    client_data = $4,
                    state = $5,
                    created_at = CURRENT_TIMESTAMP
            ''', user_id, phone, phone_code_hash, client_data, state)
        await pool.close()

    async def get_auth_session(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        pool = await create_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow('SELECT * FROM auth_sessions WHERE user_id = $1', user_id)
        await pool.close()
        
        if row:
            return {
                'user_id': row['user_id'],
                'phone': row['phone'],
                'phone_code_hash': row['phone_code_hash'],
                'client_data': row['client_data'],
                'state': row['state']
            }
        return None

    async def cleanup_auth_session(self, user_id):
        """–û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        pool = await create_pool()
        async with pool.acquire() as conn:
            await conn.execute('DELETE FROM auth_sessions WHERE user_id = $1', user_id)
        await pool.close()

    async def save_user_api(self, user_id, phone, api_id, api_hash, session_string):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        pool = await create_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO users 
                (user_id, phone, api_id, api_hash, session_string, last_activity) 
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    phone = $2,
                    api_id = $3,
                    api_hash = $4,
                    session_string = $5,
                    last_activity = $6
            ''', user_id, phone, api_id, api_hash, session_string, datetime.now())
        await pool.close()

mass_auth = MassAuthSystem()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è PostgreSQL
async def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pool = await create_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow('SELECT * FROM users WHERE user_id = $1', user_id)
    await pool.close()
    
    if row:
        return {
            'user_id': row['user_id'],
            'phone': row['phone'],
            'api_id': row['api_id'],
            'api_hash': row['api_hash'],
            'session_string': row['session_string'],
            'is_active': row['is_active']
        }
    return None

async def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pool = await create_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow('SELECT * FROM user_stats WHERE user_id = $1', user_id)
    await pool.close()
    
    if row:
        return {
            'scans_count': row['scans_count'],
            'adds_count': row['adds_count'],
            'total_added': row['total_added']
        }
    return {'scans_count': 0, 'adds_count': 0, 'total_added': 0}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è python-telegram-bot
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_data_obj = await get_user_data(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üîê –ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="quick_auth")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="manual_guide")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/zeta_support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if user_data_obj and user_data_obj.get('api_id'):
        stats = await get_user_stats(user_id)
        await update.message.reply_text(
            f"ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: `{user_data_obj['phone']}`\n"
            f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: `{stats.get('scans_count', 0)}`\n"
            f"üë• –î–æ–±–∞–≤–ª–µ–Ω–æ: `{stats.get('total_added', 0)}`\n\n"
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zeta Mass Adder!**\n\n"
            "ü§ñ *–£–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞ Telegram-—Å–æ–æ–±—â–µ—Å—Ç–≤*\n\n"
            "üéØ **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
            "1. üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "2. üîç –í—ã–±–µ—Ä–∏ —á–∞—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "3. üöÄ –î–æ–±–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n\n"
            "‚ö° **–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–∏ API –∫–ª—é—á–∏!**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "quick_auth":
        await query.edit_message_text(
            "üîê **–ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
            "üì± –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "**–ü—Ä–∏–º–µ—Ä:** `+79123456789`\n\n"
            "‚ö†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*",
            parse_mode='Markdown'
        )
        user_states[user_id] = 'waiting_phone'
    
    elif query.data == "manual_guide":
        await query.edit_message_text(
            "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
            "1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:** –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π\n"
            "2. **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:** –£–∫–∞–∂–∏ —á–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "3. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:** –í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n\n"
            "‚ö° –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!",
            parse_mode='Markdown'
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    state = user_states.get(user_id)
    text = update.message.text
    
    if not state:
        return
        
    if state == 'waiting_phone':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
        if not text.startswith('+') or len(text) < 10:
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!**\n\n"
                "üì± **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:** `+79123456789`\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                parse_mode='Markdown'
            )
            return
            
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        result = await mass_auth.start_auth(user_id, text)
        
        if result['success']:
            user_states[user_id] = 'waiting_code'
            await update.message.reply_text(
                f"‚úÖ {result['message']}\n\n"
                f"üì≤ *Telegram –ø—Ä–∏—Å–ª–∞–ª –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n"
                f"üî¢ –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `12345`",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(result['message'])
            user_states.pop(user_id, None)
            
    elif state == 'waiting_code':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
        if not text.isdigit() or len(text) != 5:
            await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5 —Ü–∏—Ñ—Ä! –ü—Ä–∏–º–µ—Ä: `12345`", parse_mode='Markdown')
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
        result = await mass_auth.verify_code(user_id, text)
        
        if result['success']:
            keyboard = [
                [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", callback_data="scan_chat")],
                [InlineKeyboardButton("üöÄ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="add_users")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üéâ **{result['message']}**\n\n"
                f"üîë **–¢–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏:**\n"
                f"‚Ä¢ API_ID: `{result['api_id']}`\n"
                f"‚Ä¢ API_HASH: `{result['api_hash']}`\n\n"
                f"‚ö° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(result['message'])
            
        user_states.pop(user_id, None)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Zeta Mass Adder Bot...")
    application.run_polling()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(init_database())
    main()
